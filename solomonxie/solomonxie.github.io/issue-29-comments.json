[{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360378605","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-360378605","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":360378605,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-25T06:58:47Z","updated_at":"2018-01-25T08:04:06Z","author_association":"OWNER","body":"## Git workflow `#1 Beginner's flow`\r\n> 最简单的Git工作流--即给初学者的工作流，尽量避免多分支，现在master分支上把常用指令学明白，然后再开启分支合流模式。\r\n\r\n### 第一步 建立仓库 (Init | Clone)\r\n一般会提到`git init`这个指令，在本地某个文件夹执行它就会把这个文件夹建立成一个git项目。但是我们初学者一般不是这个流程，我们需要建立一个github的repo，并将本地和它联通，反而简单很多。\r\n首先直接到github首页新建一个repo，建好了以后直接点clone按钮复制.git结尾的链接。在本地用`git clone`命令克隆到本地生成一个文件夹项目。如果本地已经做了一些文件，那就把文件复制进这个文件夹就好了。\r\n命令如下：\r\n```\r\n$ git clone 项目克隆网址 本地路径\r\n```\r\n然后进入文件夹开始项目即可。\r\n\r\n### 第二步 本地提交 (commit)\r\n先不涉及远程repo仓库，git需要在本地完成提交，常规三步如下：\r\n```git\r\n# 查看本地文件变动状态\r\n$ git status\r\n# 添加变动文件到预备区\r\n$ git add --all\r\n# 完成提交\r\n$ git commit -m \"变动描述\"\r\n```\r\n然后本地的准备就完成了，随时可以连接远程仓库。\r\n\r\n### 第三步 远程提交 (push)\r\n一般情况下，远程仓库都是我们自己的，拥有所有权限，所以暂不涉及向其他人的仓库提交（pull request)一类概念。\r\n所以只需推送到远程自己的仓库，一句话`git push`即可。\r\n然后如果在安装git后设置过通用的用户名和邮箱，这里就只会要求你输入密码，然后就可以上传本地提交到远程repo仓库里了。\r\n就这么简单。前三步基本流程如下图：\r\n![image](https://user-images.githubusercontent.com/14041622/35376835-c56c8fca-01e7-11e8-9e7c-bdcce610a390.png)\r\n\r\n### 第四步 远程抓取 (pull)\r\n有的时候会用别的机器（比如公司）提交一些变化到远程，然后回家后想把变化同步到本地。\r\n如果远程也是自己的repo拥有完全权限，那么直接`git pull`即可完成一切同步。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360382155","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-360382155","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":360382155,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-25T07:20:23Z","updated_at":"2018-01-25T07:21:43Z","author_association":"OWNER","body":"## 初次运行Git的配置\r\n> Linux和Mac的git安装都很方便很多是自带的，Windows则强烈推荐安装Git Bash整个终端，包括了git本身以及所有常用的linux指令。\r\n\r\n初始配置不是必要的。\r\n因为主要是配置通用的用户名和邮箱，方便每个项目登录github并上传用的。简单就是两句话设置好：\r\n```git\r\n$ git config --global user.name \"John Doe\"\r\n$ git config --global user.email johndoe@example.com\r\n```\r\n这两句话就会分别设置好当前电脑用户的通用github（或其他服务商）登录名和邮箱，密码不在这里写是要在用的时候才在命令行里输入。\r\n\r\n其实我要将的不是这两句话，网上很多人说过。只是要讲其实用`git config`命令的作用，只是把内容帮你加到`~/.gitconfig`这个文件里而已。虽然效果一样，但是便于日后管理所有git的配置内容，强烈建议不用命令输入，而是直接到这个文件里面改。参考下图：\r\n\r\n这个是默认状态下的配置文件：\r\n![image](https://user-images.githubusercontent.com/14041622/35375662-d31c1f1e-01e2-11e8-9f13-3dc06d4fb553.png)\r\n\r\n这个是利用`git config`命令后的文件：\r\n![image](https://user-images.githubusercontent.com/14041622/35375761-3536ff7a-01e3-11e8-9bd8-cae9f52e6e47.png)\r\n\r\n所以为了日后方便管理，还是直接改文件的好。\r\n另外，详细初始配置，如默认编辑器是vim还是emacs，differ用哪个编辑器显示等细节，参考git官方文档。[起步 - 初次运行 Git 前的配置](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE)"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361045188","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-361045188","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":361045188,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-28T07:59:42Z","updated_at":"2018-01-28T08:04:21Z","author_association":"OWNER","body":"# .gitignore文件\r\n> 整个项目里面肯定会有这个文件的，用来屏蔽一些文件的记录和上传。比如一些临时文件夹和涉及隐私的文件，就不需要传到github上了。\r\n\r\n## 语法\r\n简单说起来就是：\r\n- 直接写一个名字（文件名或文件夹名），它就是被屏蔽的;\r\n- 在名字前加上`!`就是不被屏蔽的，用于屏蔽整个文件夹时却不屏蔽其中的某个文件;\r\n- `#`是注释符号;\r\n- 名字里的`*`会代替名字里不限量的字，如`*.gif`, `test*.html`;\r\n- 直接写文件夹名，只会屏蔽直属于该文件夹的所有文件，但不会屏蔽其子文件夹;\r\n- 文件夹名后加`/`，就会屏蔽其中所有文件和文件夹，包括子文件夹\r\n\r\n引用一个[网上文章](https://www.jianshu.com/p/ea6341224e89)的例子：\r\n```gitignore\r\n# 忽略 .a 文件\r\n*.a\r\n# 但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件\r\n!lib.a\r\n# 仅在当前目录下忽略 TODO 文件， 但不包括子目录下的 subdir/TODO\r\n/TODO\r\n# 忽略 build/ 文件夹下的所有文件\r\nbuild/\r\n# 忽略 doc/notes.txt, 不包括 doc/server/arch.txt\r\ndoc/*.txt\r\n# 忽略所有的 .pdf 文件 在 doc/ directory 下的\r\ndoc/**/*.pdf\r\n```\r\n再加一篇网上文章：[彻底理解.gitignore](http://ybin.cc/git/gitignore-syntax/)"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361847903","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-361847903","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":361847903,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-31T07:32:16Z","updated_at":"2018-01-31T07:32:16Z","author_association":"OWNER","body":"## 提交错误 error: There was a problem with the editor 'vi'.\r\n在Mac上，可能之前重装vim变动了一些设置，所以才会有这个错误，导致git不能提交。\r\n![image](https://user-images.githubusercontent.com/14041622/35610332-d81089b6-069b-11e8-949d-7a1e3e951532.png)\r\n查了后解决方案很简单，直接输入：\r\n```shell\r\ngit config --global core.editor $(which vim)\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363008614","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-363008614","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":363008614,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-05T08:05:17Z","updated_at":"2018-02-05T08:16:34Z","author_association":"OWNER","body":"# Git为每个repo设置不同的用户名\r\n之前讲过在电脑本地文件夹中`~/.gitconfig`文件即可设置本机的通用用户名，用来登录远程。\r\n但我常会把公开代码上传到github，私密代码上传到Bitbucket，所以需要不同的登录名等。\r\nGit其实可以为每个repo设置单独的用户名用来登录远端，像global的用法一样，可以命令行里设置也可以直接在文件里写：\r\n```\r\n$ git config user.name \"John Doe\"\r\n$ git config user.email johndoe@example.com\r\n```\r\n手动改写文件的话，就位于repo目录中的`.git/config`这个文件。\r\n设置的格式和`~/.gitconfig`完全一样，具体参考git初始配置那篇。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363562001","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-363562001","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":363562001,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-06T20:56:54Z","updated_at":"2018-02-06T20:56:54Z","author_association":"OWNER","body":"# Git误删文件恢复的方法\r\nStackoverflow的这个回答相当不错，我也很快找回了文件。[参考链接](https://www.quora.com/How-can-I-recover-a-file-I-deleted-in-my-local-repo-from-the-remote-repo-in-Git)\r\n具体说起来是这样的，\r\n```\r\n# If the deletion has not been committed, \r\n# the command below will restore the deleted file in the working tree.\r\ngit checkout -- <file>\r\n\r\n# You can get a list of all the deleted files in the working tree using the command below.\r\ngit ls-files --deleted\r\n\r\nIf the deletion has been committed, find the commit where it happened, then recover the file from this commit.\r\ngit rev-list -n 1 HEAD -- <file>\r\ngit checkout <commit>^ -- <file>\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363670617","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-363670617","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":363670617,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T06:27:36Z","updated_at":"2018-02-07T06:32:51Z","author_association":"OWNER","body":"# 阿里云Code (Git托管）的初始设置\r\n最近在考虑有的时候想托管一些国内方便的内容比如当cdn使用，还有码云什么的，比较了下易用性和容量，仅有的几个托管商里也就阿里云最合适，也最接近github。\r\n[链接](https://code.aliyun.com/)\r\n其它都是正常操作，唯一遇到的问题是git push的时候总是无法完成用户认真，在git里面设置了user.name和email等都不行。\r\n原来阿里云code的登录密码是单独设置的，不能直接用自己的账号密码去登录，\r\n必须要在阿里云Code的管理后台里面找到密码设置，然后选择忘记密码（修改密码没用，因为没有原始密码，只能点忘记密码）。\r\n\r\n发邮件确认后，设置密码，就可以登录了。\r\n所以这里git push时，用户名是阿里云的账号email， 密码是Code的单独密码。\r\n参考[官方文档](https://help.aliyun.com/document_detail/60018.html#h1-u4E2Au4EBAu8BBEu7F6E)。\r\n\r\n但是！这时候还不能做push等远程操作。如图：\r\n![image](https://user-images.githubusercontent.com/14041622/35901838-b313ff80-0c13-11e8-8b36-962eb84710f8.png)\r\n\r\nrepo页面里面，一不小心漏过了一条提示：\r\n![image](https://user-images.githubusercontent.com/14041622/35901276-d3f91594-0c10-11e8-9ba4-e24ad1183b27.png)\r\n\r\n按照提示，在Profile->sshkeys页面里面，把本地电脑里`~/.ssh/id_rsa.pub`这个公钥文件内容粘贴到里面，添加密钥：\r\n![image](https://user-images.githubusercontent.com/14041622/35901705-f563cefc-0c12-11e8-919a-ab410baad71a.png)\r\n\r\n阿里云还需要设置每个参与人员的权限。在控制台里可以找到，如下图：\r\n![image](https://user-images.githubusercontent.com/14041622/35900541-7342081c-0c0d-11e8-8b1f-bf464c446d4c.png)\r\n\r\n但是不管我怎么尝试，都添加不了members，项目中都members总是为0。\r\n\r\n最后结果还是不能push。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363708106","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-363708106","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":363708106,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T09:26:13Z","updated_at":"2018-02-07T09:26:13Z","author_association":"OWNER","body":"# Github 存储容量标准\r\n官方解释的非常清楚，[在这里](https://help.github.com/articles/what-is-my-disk-quota/)，包括各种访问方式、大文件处理方式、repo存储空间提示等等的情况。\r\n说白了，Github几乎没有任何容量限制，但是你不怀好意地把github当网盘用，频繁访问、不断传大文档等，是会收到通知的。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364630078","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-364630078","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":364630078,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T06:26:28Z","updated_at":"2018-02-10T06:44:38Z","author_association":"OWNER","body":"# Git文件历史追踪问题\r\n> 有很多时候，git追踪某一个文件的变化历史和轨迹，是非常重要的，不管是代码还是文档。这里主要说文档。但是我们的笔记、文档，总是喜欢改名和转移目录之类行踪不定，那么一旦有这些改动，git还能追踪吗？\r\n\r\n## 文件改名 `rename`\r\n> git仓库实际上对文件改名这个问题是比较忌讳的，应当说是尽量避免的。因为如果不用特殊处理，改名之后git只会认为你删了这个文件，又新建了另一个文件。\r\n\r\n如果你在系统里面手动把一个文档`1.txt`改成了`2.txt`，那么这时候输入`git status`只会看到`1.txt`被删除，新增加文件`2.txt`。\r\n同样的，命令行里用`mv 1.md 2.md`改名，也是同样的效果。\r\n要保持这个文件历史记录不断的话，`正确做法`是：\r\n```\r\ngit mv 1.txt 2.txt\r\n```\r\n这样再用`git status`查看就会看到，识别为`renamed:   1.txt -> 2.txt `。它的历史记录就没有断。\r\n\r\n## 文件移动\r\n> 有时候会把文件移动到另一个文件夹或者某个子文件夹，但是git却认为你是删了一个而新建了另一个。\r\n\r\n这是因为和改名一样，只要是在git命令之外移动的，git就识别不到。\r\n所以，这里也要用`git mv`命令来移动。\r\n```\r\ngit mv 1.txt ./src/1.txt\r\n```\r\n这个时候在查看git状态就会发现，显示为`renamed:   1.txt -> src/1.txt`\r\n\r\n## 文件覆盖\r\n> 这个问题逻辑要复杂点：有时候我们需要批量抓取网上的一些资源到这个目录里面，有些是重复的内容一样的，有些却是新的，还有些是网上删除了的，那么我们想要网上抓取的和本地的同步，应当怎么办呢？\r\n\r\n虽然这个方法不严谨，但是非常简单有效：只要这些东西体积不是很大，那么就可以完全删除本地现有的文件，然后再把新抓取的保存到本地。\r\n这个时候就是考验git的追踪识别能力了。\r\n经过一系列试验发现：\r\n- 首先不能用`git rm`删除文件，如果用了它那么不管怎么做，它都会知道你删除了文件，而我们要做的是让它误以为没有删除。\r\n- 如果文件位置和名字没变，内容也没变，那么只要你没有add或commit，即使新生成的文件的创建日期和修改日期都变化了，`git status`也不会显示任何变动。\r\n- 如果文件位置和名字没变，内容变化了，只要没add或commit，那么`git status`只会告诉你`modified 某文件`。\r\n- 如果文件位置或名字变了，那么，**git完全不知道**。会认为你删除了老的，建了新的。像上面重命名的问题一样。这时候如果你还想要保持这个文件的追踪历史，要不你就尽量避免改名字，要不就想把法用`git mv`命令告知git，但是这个逻辑比较麻烦，尤其是涉及文件比较多的时候。所以我一般选择避免改名字，或干脆就断了追踪。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364634370","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-364634370","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":364634370,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T08:01:55Z","updated_at":"2018-02-10T08:23:25Z","author_association":"OWNER","body":"# Git缓冲区理解：`index`，`add`和`reset`，`staged`和`unstaged`\r\n> 在git里面，有一个叫`index`的区域，你把东西加到那里叫`add`， 把东西再从哪里撤回来叫`reset`；已经在里面的我们形容它是`staged`，还没有加进去的我们形容它是`unstaged`。\r\n\r\n其实`index区`就是一个纯粹的缓冲区，也叫`staging area`，是正式提交之前给我们的一个缓冲，还有犹豫的余地。因为一旦正式commit提交了，你所有还没解决的愚蠢的傻事都会公开，即使能覆盖能撤销，但还是掩藏不了历史。\r\n\r\n自己做的话无所谓其实，但是如果是团队合作的话，每次commit都是一次公开。\r\n其实形容的话，就相当于老板让你做个项目，你肯定不可能做了一点东西就跑到老板办公室去送一趟文件，应该会先把做好的放在桌子的上那个小文件架上。然后那个文件架就叫`index`。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364635636","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-364635636","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":364635636,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T08:26:02Z","updated_at":"2018-02-10T09:53:50Z","author_association":"OWNER","body":"![image](https://user-images.githubusercontent.com/14041622/36060082-b951bb6a-0e7c-11e8-9a66-b69e1ebe0091.png)\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/36060761-9f2ead34-0e8a-11e8-857c-2ade28a723af.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364635662","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-364635662","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":364635662,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T08:26:41Z","updated_at":"2018-02-10T08:40:08Z","author_association":"OWNER","body":"# Git的merge理解\r\n> 一般来说，`merge`是新手的噩梦 。所以为了还有学习的动力，我前期几乎放弃，只是一心只用最简单的功能，等像现在这样慢慢理解了基本东西了，了解基本知识局限性了遇到很多问题了，才是好机会来加强理解这一层。\r\n\r\n当我们谈到merge的时候，实际上是有很多种不同的情况的。比如有这几种情况的merge，分别是：`local merge`,`sync merge`和`fork merge`。（这都是我自己起的名字）\r\n\r\nMerge本身并不难理解，无非是从这边融合到那边，不同的只是起点终点的方向罢了。\r\nMerge的难点在于`merge conflict`，就是融合的时候有冲突怎么办？"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364638363","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-364638363","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":364638363,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T09:22:28Z","updated_at":"2018-02-10T11:09:43Z","author_association":"OWNER","body":"# Git的checkout理解\r\n> `git checkout`实际上其实是个平行宇宙时光机，可以带你穿梭到任意一个平行宇宙中，还可以带你穿梭回过去的任意一个时间点。在过去的那个点上，你可以各种观察、修改、删除等，而不对原本时间点产生任何影响。\r\n\r\n每一个branch分支，都是一个平行的宇宙，你可以用checkout在两个宇宙之间穿梭。\r\n每一个commit提交，都是现在时间轴上的一个时间点，你可以用checkout回到过去的任何一个时间上。\r\n\r\n顺着时光机的思路，你现在身处的时间点，在git里叫`HEAD`，而当你回到过去时，你的时间点就叫做`detached HEAD`，因为你已经是\"detached reality\"脱离现实了。\r\n\r\n再来让它容易记一点，我们可以叫`checkout`为一个`Jumper`！\r\n它可以跳来跳去，跳到任何地方。你可以用它来跳到别的分支，还可以跳到过去的任何点，总之git里面的它都可以跳过去。所以每次我们用`git checkout`时，我们可以心里念`git 跳到`，这样就好理解多了！\r\n\r\n> 如果是`git checkout 时间点`，那么这就是一个回到过去的跳跃；\r\n   如果是`git checkout 宇宙名`，那么这就是一个平行宇宙的跨越。\r\n\r\n其中`时间点`，就是每次commit的sha值，可以在`git log`中看到；\r\n`宇宙名`，指的就是每个branch的名字，可以在`git branch`中看到。\r\n\r\n## 那么如果我checkout跳到过去，还改变了些东西，会发生什么？\r\n> 可以肯定的是，不会发生时空扭曲或祖母悖论。\r\n\r\n现在我试一试用`git checkout 时间点`, git返回了如下信息：\r\n![image](https://user-images.githubusercontent.com/14041622/36060959-2bb994be-0e8e-11e8-8217-54b317a8c2f0.png)\r\n意思就是告知我，现在已经和`现实分离`，随便玩。“现实”就是`HEAD`，所以`现实分离`状态就是`detached HEAD`。不管怎么样都可以，add, rm, commit等等。\r\n但是，如果做了些实验发现挺好的，想保留，那么就要新建立一个分支来保持这些变动。然后呢，再让这个分支去和主流合并，这之后就是正常merge流程了。\r\n\r\n那么回到过去，修修改改后，想保存并建立分支需要用如下命令：\r\n```shell\r\ngit checkout -b <new-branch-name>\r\n```\r\n实际上它是把两个单独的命令合到一起，一个是`git branch <name>`建立新分支并保存当前的改变，和另一个`git checkout <name>`跳转到该分支，这样一步到位还是挺方便的。\r\n\r\n### 返回到现在进行时\r\n当跳跃到过去到某个点时，它是绝对的`detached Head`状态。\r\n在各种时间跳跃后，简单一句`git checkout master`就可以跳回到现在进行时了。当然，也可以是`git checkout 某分支名`跳跃到任何一个平行宇宙的现在进行时。\r\n\r\n## Git checkout 的妙用：撤销更改\r\n`git checkout 某文件名`则可以让某个自己不满意的文件，回到最近一个时间点，即最近一个commit提交。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364640538","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-364640538","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":364640538,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T10:04:19Z","updated_at":"2018-03-02T16:10:05Z","author_association":"OWNER","body":"# Git的diff理解与学习\r\n> `git diff`和系统的`diff`命令是不同的，`git diff`是用作对比两个文件的差别，但是它是对这个文件和它在时光轴上的某个点上的自己做对比。当然`git diff`也可以用作--------\r\n\r\n明白这点，就好理解多了。\r\n先看这幅图：\r\n![image](https://user-images.githubusercontent.com/14041622/36060761-9f2ead34-0e8a-11e8-857c-2ade28a723af.png)\r\n\r\n`git diff`可以用当前工作区的某文件，来进行：@1 它和自己保存在缓冲区的复制品对比，@2 它和过去每一个commit时光点上的自己对比。\r\n当然，对比开始后，显示结果就和系统`diff`显示的大同小异了。\r\n```shell\r\n# 当前工作区与缓冲区的对比\r\ngit diff [指定对比的文件，或不指定也行]\r\n\r\n#  缓冲区与过去commits对比\r\ngit diff --staged [指定对比的文件，或不指定也行]\r\n```\r\n\r\n## 本次commit与上次commit的diff\r\n[参考文章。](https://stackoverflow.com/questions/9903541/finding-diff-between-current-and-last-versions)\r\n最简单写法：\r\n```python\r\ngit diff HEAD^ HEAD\r\n# or\r\ngit diff @~..@\r\n# or\r\ngit show\r\n# or with GUI display\r\ngit difftool HEAD^ HEAD\r\n```\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364642009","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-364642009","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":364642009,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T10:32:36Z","updated_at":"2018-02-10T10:32:36Z","author_association":"OWNER","body":"# Git的Reachability理解\r\n> 根据现有commits和branches的树形结构，有很多节点是无法访问到的，"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365271935","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-365271935","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":365271935,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T13:50:23Z","updated_at":"2018-02-13T13:50:23Z","author_association":"OWNER","body":"# Git `pull`遇到错误 `refusing to merge unrelated histories`\r\n\r\n```shell\r\ngit checkout master\r\ngit merge origin/master --allow-unrelated-histories\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365302814","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-365302814","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":365302814,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T15:34:18Z","updated_at":"2018-02-13T15:34:18Z","author_association":"OWNER","body":"# Git 在当前目录之外的地方执行命令\r\n\r\n```shell\r\n# Clone a repos\r\ngit clone <URL> <PATH>\r\n\r\n# Run git command at another folder\r\ngit -C <PATH> <COMMAND>\r\n```\r\n\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365328832","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-365328832","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":365328832,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T16:51:09Z","updated_at":"2018-02-13T16:51:09Z","author_association":"OWNER","body":"# Git 添加remote远端仓库对应\r\n\r\n[参考文档](https://help.github.com/categories/managing-remotes/)\r\n```shell\r\ngit remote add origin https://github.com/user/repo.git\r\n\r\n# Branch master set up to track remote branch master from origin.\r\ngit branch -u origin/master\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365868905","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-365868905","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":365868905,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-15T09:22:10Z","updated_at":"2018-02-15T09:38:10Z","author_association":"OWNER","body":"# Git push 遇到 `failed to push some refs to` 错误\r\n> 一直在让脚本自动push本地仓库，仓库中的一些文件是从网上更新下来的，每次到push这一步都会产生错误，好像意思是remote有更新但是本地还没更新之前就push是不行的。但是所有remote更新都是本地push上去的，本地应该是一直保持在最新才对。。。不知道为什么\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/36249328-427cfe44-1275-11e8-8c8a-662774748e71.png)\r\n\r\n[参考stackoverflow回答](https://stackoverflow.com/questions/24114676/git-error-failed-to-push-some-refs-to)\r\n\r\n在每次commit本地更新后，在push前用`git pull --rebase origin master`解决了。\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366187286","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-366187286","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":366187286,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T09:39:46Z","updated_at":"2018-02-16T09:53:29Z","author_association":"OWNER","body":"# 让git记住密码\r\n全局的话：\r\n```shell\r\ngit config --global credential.helper cache\r\n```\r\n只是当前repo的话：\r\n```shell\r\ngit config credential.helper cache\r\n```\r\n这两句话的做的工作是一样的，就是在`~/.gitconfig`全局配置文件或者`.git/config`当局配置文件中加入这段话：\r\n```\r\n[credential]\r\n        helper = cache\r\n```\r\n所以直接找到配置文件加入这两句话也是一样的。\r\n\r\n上面三种配置都完成后，git push的时候就会记住密码，下次不用再输入了。\r\n\r\n不过有个问题是，最好在全局配置user.name 和user.email，不然的话还是需要每次都让你输入用户名密码。\r\n\r\n\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366866417","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-366866417","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":366866417,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-20T04:51:32Z","updated_at":"2018-02-20T08:19:01Z","author_association":"OWNER","body":"# 用SSH与Github连接（push等）\r\n为了让服务器自动push本地仓库，试过了`git config credential.helper cache`这样让它缓存用户名。\r\n但是这个不稳定，每过一段时间github又会要求你再手动输入密码。\r\n如果想让脚本自动推送，最可靠的还是用ssh访问github。\r\n可是一般都知道，ssh要访问哪里，本地还是需要输入一个密码来解锁ssh的private key的，说白了就跟不用ssh连接直接输入密码没区别了嘛！\r\n网上解决方案一般都是用什么openssl之类的，重新生成一个没有密码的ssh key。太麻烦，\r\n发现其实ssh自带生成密钥的工具就能够设置不带密码的key。\r\n\r\n方法：\r\n直接输入`ssh-keygen`命令，就会提示输入`key pair`密钥对的地址和名称，不输的话就默认为`~/.ssh/id_rsa`这个文件作为私用密钥，同目录的`id_rsa.pub`作为公用密钥。\r\n然后会提示输入密码，这时只要什么都不输直接回车，就可以创建好一个不用输`passphrase`的ssh key了。\r\n然后到github的个人设置页里，找到ssh处，把`id_rsa.pub`的内容完全拷贝进去保存即可。\r\n这时候，随意的`git push`之类与远程仓库连接都不需要输什么密码了。\r\n\r\n问题：\r\n目前只有默认名的`~/.ssh/id_rsa`这个管用，自己起名字的ssh key现在还不能用。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/367014595","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-367014595","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":367014595,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-20T15:30:31Z","updated_at":"2018-02-20T15:30:31Z","author_association":"OWNER","body":"# Git与python的Virtualenv冲突\r\n如果在git仓库中使用了virtualenv，那么每当使用`git add .`或者`git commit`都会遇到错误，使得不能继续。问题就在于virtualenv对它的冲突。\r\n目前简单的解决办法就是在`.gitignore`中把所有virtualenv相关的文件都屏蔽，一般包括`.Python`,`lib`,`include`,`bin`。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/368340577","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-368340577","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":368340577,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-25T20:13:52Z","updated_at":"2018-02-25T20:13:52Z","author_association":"OWNER","body":"# Git通过proxy代理访问\r\n假设本地的代理端口为1087，那么命令行设置：\r\n```\r\ngit config --global http.proxy http://127.0.0.1:1087\r\n```\r\n或者直接在`~/.gitconfig`中添加：\r\n```\r\n[http]\r\n    proxy = http://127.0.0.1:1087\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/369959569","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/29#issuecomment-369959569","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/29","id":369959569,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-03-02T15:50:48Z","updated_at":"2018-03-03T05:38:13Z","author_association":"OWNER","body":"# 用SSH连接github项目时报错`ssh_exchange_identification: Connection closed by remote host`\r\n一直在正常通过ssh连接github的repo，在哪里都没有改动的情况下突然`git push`不管用，一直报这个错误，就连`git clone`一个ssh地址都不行。\r\n还以为github把我屏蔽。\r\n考虑了网上很多本地ssh连接的问题，都没用，而且思路也不对。\r\n索性ssh连接到我在新加坡租用的服务器，在服务器里尝试ssh连接github。\r\n结果还是不行！\r\n所以不是Github屏蔽了我的IP，也不是我本地的ssh设置问题，因为服务器的ip地址和ssh等都不一样还是遇到了这个问题。\r\n网上还有说路由器的加速插件问题，这个也通过用服务器连接和切换wifi的方式否定掉了。\r\n结果我心里只有一个结论：那就是Github本身的问题了。\r\n结果没过几分钟，\r\n所有端都可以正常连接了。\r\n也许真的是github突然遇到什么问题导致所有地方都不能访问。\r\n\r\n第二天更新：\r\n结果真的第二天就收到这个新闻：Github昨天晚上遭遇史上最大DDOS攻击。但是不包括我吧，我顶多每分钟10次连接，而且还是用的绑定的ssh key和oauth码。。。\r\n![image](https://user-images.githubusercontent.com/14041622/36930989-e39b3772-1ee7-11e8-93ae-5c0b83817d44.png)\r\n\r\n"}]