[{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/359389891","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-359389891","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":359389891,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-22T10:57:24Z","updated_at":"2018-01-22T12:06:31Z","author_association":"OWNER","body":"## 配置：先从配置行号开始\r\n> 其实对初学者来说，不需要太花哨的东西，只需要练习各种快捷键就好了。\r\n但是没有行号是真的很头疼的，所以这是我第一步想做的。\r\n\r\n可以直接在vim中输入命令达到效果：\r\n`:set number`\r\n但是这个不会保存，一退出就没有了。所以需要一个配置文件来长期维持。\r\n这个文件就是vim最重要的配置文件了 `.vimrc`，一切的配置语句都写在这个文件里。\r\n它的位置为_~/.vimrc_。\r\n然后这么操作就够了：\r\n```bash\r\ntouch ~/.vimrc\r\nvim ~/.vimrc\r\n```\r\n然后在文件里随便找个空位置写上_set number_就ok了。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/359404341","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-359404341","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":359404341,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-22T12:03:26Z","updated_at":"2018-01-30T17:42:11Z","author_association":"OWNER","body":"## 配置：设置颜色主题 \r\n> 既然都开启了`vimrc`技能，就忍不住好奇心去看看还有什么能配置的。这里就不一一说明了，这个坑太大，配置方案太多。先讲个代表性的配色问题。以下在mac下有效。\r\n\r\n首先, vim自带有一些基本的色彩主题，一般在`/usr/share/vim/vim74/colors/`中，如下图：\r\n![Default Colors](https://user-images.githubusercontent.com/14041622/35219551-0c24371a-ffae-11e7-93dc-f1e59660b158.png)\r\n这个文件夹由于权限原因，不能动。所以要到当前用户的用户文件夹来增加配置文件。一般当前用户是没有这个配置文件夹的，需要自己新建。\r\n```shell\r\nmkdir ~/.vim \r\nmkdir ~/.vim/colors\r\n```\r\n然后把下载好的色彩主题包中`/colors/`文件夹全部拷贝到`~/.vim/colors/`中就可以使用了。具体操作如下：\r\n### 下载主题包\r\n这个网址是vim官方收集的各种主题包：[Vim.org色彩主题集](http://www.vim.org/scripts/script_search_results.php?keywords=&script_type=color+scheme&order_by=creation_date&direction=descending&search=search)。\r\n我这里下载了一个badwolf主题，是zip文件。解压后将主题包里`colors`文件夹内的`.vim`文件直接拷贝到`~/.vim/colors/`中即可。\r\n然后在vim或`.vimrc`文件中输入这两句句话配置就成功了：\r\n```vimrc\r\ncolorscheme 色彩主题名称\r\nsyntax on\r\n```\r\n效果如下图：\r\n![image](https://user-images.githubusercontent.com/14041622/35219872-3d0bac90-ffaf-11e7-94a7-fe6e1531b692.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/359422052","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-359422052","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":359422052,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-22T13:24:04Z","updated_at":"2018-01-31T07:33:41Z","author_association":"OWNER","body":"## Vim学习成长列表\r\n> 参考 [Vim简明教程](http://blog.csdn.net/niushuai666/article/details/7275406)\r\n\r\n- [x] 各种插入模式\r\na → 在光标后插入\r\no → 在当前行后插入一个新行\r\nO → 在当前行前插入一个新行\r\ncw → 替换从光标所在位置后到一个单词结尾的字符\r\n\r\n- [x] 简单的移动光标\r\n0 → 数字零，到行头\r\n^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）\r\n$ → 到本行行尾\r\ng_ → 到本行最后一个不是blank字符的位置。\r\n/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）\r\n\r\n- [x] 翻页\r\nCtrl+f和Ctrl+b  上下翻页\r\nCtrl+u和Ctrl+d 上下翻半页\r\n\r\n- [x] 拷贝/粘贴\r\n （p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）\r\nP → 粘贴\r\nyy → 拷贝当前行当行于 ddP\r\n\r\n- [x] Undo/Redo\r\nu → undo\r\n<C-r> → redo\r\n\r\n- [ ] 打开/保存/退出/改变文件(Buffer)\r\n:e <path/to/file> → 打开一个文件\r\n:w → 存盘\r\n:saveas <path/to/file> → 另存为 <path/to/file>\r\n:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)\r\n:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。\r\n:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。\r\n\r\n- [ ] 重复命令\r\n. → (小数点) 可以重复上一次的命令\r\nN<command> → 重复某个命令N次\r\n2dd → 删除2行\r\n3p → 粘贴文本3次\r\n100idesu [ESC] → 会写下 100个`desu`\r\n`.` → 重复上一个命令—— 100 “desu “.\r\n`3.` → 重复 3 次 “desu”\r\n\r\n- [x] 合并行\r\nJ 合并当前行和下一行\r\n3J 连同当前行一共合并3行\n- [x] 行目跳转\r\nNG → 到第 N 行 \r\ngg → 到第一行\r\nG → 到最后一行。\r\n按单词移动：\r\nw → 到下一个单词的开头。\r\ne → 到下一个单词的结尾。\r\n\r\n- [ ] 窗口跳转\r\nCtrl + w, 然后用JKHL方向键跳转\r\nCtrl + w 再按q, 退出当前窗口\r\n:sp 将当前窗口分成两个\r\n\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361245760","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-361245760","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":361245760,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-29T13:31:14Z","updated_at":"2018-01-30T12:28:32Z","author_association":"OWNER","body":"## Vim 安装插件管理器\r\n安装插件前，一般都会用到`Vundle`这个插件包管理器。它的名字其实是`Vim bundle`的组合。\r\n安装方法可以参考[官网](https://github.com/VundleVim/Vundle.vim)，说的很详细。简单说的话，安装方法如下：\r\n```\r\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\r\n```\r\n然后打开`~/.vimrc`，把下面这段话全部粘贴到文件顶部:\r\n```\r\n\" Vundle phrases must be on the top\r\nset nocompatible              \" be iMproved, required\r\nfiletype off                  \" required\r\nset rtp+=~/.vim/bundle/Vundle.vim\r\ncall vundle#begin()\r\n    Plugin 'VundleVim/Vundle.vim'\r\ncall vundle#end()            \" required\r\nfiletype plugin indent on    \" required\r\n```\r\n其中`Plugin`的部分，可以删除不需要的插件。\r\n保存后，直接在Vim界面里输入这个命令：`:PluginInstall`，或在外部运行`vim -c VundleUpdate -c quitall`。然后vim就会跳转到插件安装界面，并自动下载安装上面列出来的插件。\r\n![image](https://user-images.githubusercontent.com/14041622/35513252-6192f5e4-053d-11e8-9c4d-f70aab0b8b54.png)\r\n等到最下面显示`Done!`时，就安装完成了。需要整个退出Vim，再进入，就可以使用了。\r\n\r\n## 删除插件\r\n直接在`.vimrc`里把Plugin的那一行删除，然后在vim里运行`:PluginUpdate`即可，然后将`~/.vim/bundle/`下该插件的目录删除。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361539775","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-361539775","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":361539775,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-30T09:55:41Z","updated_at":"2018-01-30T10:03:11Z","author_association":"OWNER","body":"## Vim上的Snippets插件\r\n> 想要Vim像Sublime一样快速编程，就需要各种好的snippets快速生成一段预备好的代码。一般常用的插件是`UltiSnips`作为生成代码的引擎，`Vim-snippets`插件作为各种语言的常用语句包。\r\n\r\n### 安装Snippets插件\r\n在已有Vundle插件管理器的基础上，直接在`.vimrc`文件中加入这两个插件名：\r\n![image](https://user-images.githubusercontent.com/14041622/35559228-243d437c-05e5-11e8-9c9f-4993bdd80282.png)\r\n然后退出vim再进入vim，输入命令: `:PluginInstall`，等待安装完成后，重新进入vim，就可以正常使用了。\r\n\r\n### 创建snippets\r\n相比于sublime， 在vim中创建snippets是稍微麻烦点。主要跟随这几点：\r\n- 找到插件目录，是位于`~/.vim/bundle/`下的`ultisnips`和`vim-snippets`。\r\n- 不要在`vim-snippets`中预备好的各语言snippets上直接修改，因为每次更新都会被覆盖。\r\n- 必须在`ultisnips`文件夹下创建一个`UltiSnips`文件夹，所有自定义代码都存在这里。\r\n- 自定义的代码片段必须给每个语言创建单独文件，保存的文件名必须遵循`语言名.snippets`格式.如果是运用到所有文件上的，就叫`all.snippets`。\r\n- 文件保存后即刻生效，无需重启vim。\r\n- 代码片段文件里面需要遵循如下格式：\r\n```\r\nsnippet  关键词 “描述” 生成模式\r\n代码片段\r\nendsnippet\r\n```\r\n其中，生成模式有很多种，一般为`b`，即只有在一行的开头输入关键词时，才会调用代码片段。其它还有b, A, w, i等模式，具体可以在vim 的`:help ultisnip`中查看文档。\r\n\r\n举个例子，我们要为html文件做一些快捷代码，那么：\r\n```shell\r\n$ vim ~/.vim/bundle/ultisnips/UltiSnips/html.snippets\r\n\r\nsnippet html \"create html 5 structure\" b\r\n<!DOCTYPE html>\r\n<html>\r\n<head><title></title></head>\r\n<body>\r\n</body>\r\n</html>\r\nendsnippet\r\n```\r\n保存后打开一个html文件，找个地方输入`html`然后按Tab，就会弹出预定好的html代码。\r\n注意：由于安装了`vim-snippets`常用代码集，html文件中的很多关键词都被占用了，比如`html`。所以要避免冲突，可以直接到`~/.vim/bundle/vim-snippets/UltiSnips`中对应的文件中查看：\r\n![image](https://user-images.githubusercontent.com/14041622/35560217-b50bba1c-05e7-11e8-8595-3109f8e68a48.png)\r\n\r\n\r\n### snippets 高阶用法\r\n> 上面只是输入关键词然后生成一段固定内容的方法。实际上更常用的方法是，根据给定的变量生成动态内容，或是指定需要更改的几个位置，生成内容后自动把焦点分别指向这几个位置供你修改。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361585065","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-361585065","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":361585065,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-30T12:55:49Z","updated_at":"2018-01-30T12:55:49Z","author_association":"OWNER","body":"## 从源代码编译Vim 8.0 （当前环境：树莓派原生系统）\r\n> 因为在安装某个vim最难安装的插件，必须要最新版本的vim才行，而通过`apt-get`是无法更新vim的，所以又必须要自己在本地编译源代码才行。所以才花了几个小时倒腾这个。我相信，非常非常非常多的人在编译vim都遇到了困难。\r\n\r\n因为不敢在Mac自己机子上随便试，就拿树莓派练手。安装过程不光麻烦，而且耗时比较长。具体是参考[这篇文档](https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source)安装，中文翻译版本在[这里](https://linux.cn/article-8094-1.html)。\r\n简而化之，我使用的命令如下：\r\n```shell\r\n# 安装基础支持库\r\nsudo apt install libncurses5-dev libgnome2-dev libgnomeui-dev \\\r\n    libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \\\r\n    libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \\\r\n    python3-dev ruby-dev lua5.1 lua5.1-dev libperl-dev git\r\n\r\n# 删除已安装的vim和所有相关\r\nsudo apt-get remove vim vim-runtime gvim vim-tiny vim-common vim-gui-common vim-nox\r\n\r\n# 从vim的github上下载最新的源文件（太慢的话就直接手动去其github页面下载zip文件并解压）\r\ncd ~\r\ngit clone https://github.com/vim/vim.git\r\n\r\n# 初始化配置\r\ncd vim\r\n./configure --with-features=huge \\\r\n    --enable-multibyte \\\r\n    --enable-rubyinterp=yes \\\r\n    --enable-pythoninterp=yes \\\r\n    --with-python-config-dir=/usr/lib/python2.7/config \\\r\n    --enable-python3interp=yes \\\r\n    --with-python3-config-dir=/usr/lib/python3.5/config \\\r\n    --enable-perlinterp=yes \\\r\n    --enable-luainterp=yes \\\r\n    --enable-gui=gtk2 --enable-cscope --prefix=/usr\r\nmake VIMRUNTIMEDIR=/usr/share/vim/vim80\r\n\r\n# 编译\r\ncd ~/vim\r\nsudo make install\r\n\r\n# 设置vim为默认编辑器\r\nsudo update-alternatives --install /usr/bin/editor editor /usr/bin/vim 1\r\nsudo update-alternatives --set editor /usr/bin/vim\r\nsudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim 1\r\nsudo update-alternatives --set vi /usr/bin/vim\r\n\r\n# 检查vim版本\r\nvim --version\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361621803","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-361621803","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":361621803,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-30T15:07:22Z","updated_at":"2018-01-30T15:07:22Z","author_association":"OWNER","body":"## Vim自带补全工具 OmniComplete\r\n用了一天倒腾自动补全插件，实在是崩溃，但凡有点名气的都对vim本身的编译有很麻烦的要求。搜索过程中才发现Vim其实是自带补全功能的，称为`OmniComplete`。\r\n输代码的过程中，直接按`Ctrl+X`然后再按`Ctrl+O`，就会弹出vim猜测的一系列补全内容。可以在菜单里按“上下键”选择，注意是方向上下键，不是JK键。\r\n经过测试，原生支持很多种语言。\r\n![image](https://user-images.githubusercontent.com/14041622/35573497-42d7e634-0612-11e8-80de-75c35583f096.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362234345","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-362234345","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":362234345,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-01T11:09:56Z","updated_at":"2018-02-01T11:09:56Z","author_association":"OWNER","body":"## Vim键盘映射\r\n> 之前一直在找方法将`Capslock`键映射为`Esc`键，这样vim中就不用每次跑很远去按Esc了。可惜MacOS最新版的系统都无法很好兼容市面上的键盘映射软件，就放弃了。\r\n然后发现Vim其实本身就可以设置键盘映射，这样大好，原本对Key Mapping需求多的也只有Vim而已，其它地方不太需要这么乱七八糟的改键。\r\n\r\n### 方法一：直接在Vim中输入命令\r\n`:map 原键 新键`\r\n如`:map a b`，就是按a时会变成b。`:map <Esc> <C-c>`则是把`Esc`映射为`Ctrl+C`。\r\n输入映射命令时需要注意大小写。\r\n另外：\r\n这个命令不是临时的，退出vim后依然存在。如果需要删除，则用`:mapclear`命令清楚所有的。\r\n\r\n### 方法二：在`.vimrc`中配置\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362567645","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-362567645","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":362567645,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-02T11:57:49Z","updated_at":"2018-02-02T11:58:11Z","author_association":"OWNER","body":"## <Leader>是什么东西\r\n参考[这篇](http://learnvimscriptthehardway.stevelosh.com/chapters/06.html)。\r\n![image](https://user-images.githubusercontent.com/14041622/35732048-f7aa915a-0852-11e8-886b-6465a5ac1973.png)\r\n说白了，就是一个快捷命令的前缀。一般比如cc，dd之类都被占用，映射起来不方便。所以加上`前缀`后，就可以追加各种自己喜欢的快捷命令了。\r\nVim的默认Leader前缀是`\\`键。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362571759","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-362571759","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":362571759,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-02T12:19:31Z","updated_at":"2018-02-02T12:19:31Z","author_association":"OWNER","body":"## Vim注释的方法\r\n> Vim里面注释对初学者真是比较头疼的事情。需要先$跳到行头，i插入模式，输入注释，Esc退出插入模式。如果批量就更麻烦。下面是几种常用方法。\r\n\r\n1. 原生方法一\r\n> `Ctrl+v`进入Block选择，向下移动选择待注释行，`Shift+i`批量插入，输入注释符，按两次Esc退出，等几秒实现批量注释。\r\n\r\n2. `.vimrc`配置文件法\r\n在`.vimrc`中加入如下语句：\r\n```\r\n\" Commenting blocks of code.\r\nautocmd FileType c,cpp,java,scala let b:comment_leader = '// '\r\nautocmd FileType sh,ruby,python   let b:comment_leader = '# '\r\nautocmd FileType conf,fstab       let b:comment_leader = '# '\r\nautocmd FileType tex              let b:comment_leader = '% '\r\nautocmd FileType mail             let b:comment_leader = '> '\r\nautocmd FileType vim              let b:comment_leader = '\" '\r\nnoremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\\/')<CR>/<CR>:nohlsearch<CR>\r\nnoremap <silent> ,cu :<C-B>silent <C-E>s/^\\V<C-R>=escape(b:comment_leader,'\\/')<CR>//e<CR>:nohlsearch<CR>\r\n```\r\n然后注释的快捷键是`,cc`，取消注释是`,cu`。\r\n\r\n3. 插件法\r\n常用插件有NerdCommenter，在`vimrc`的插件位置中加入`Plugin 'scrooloose/nerdcommenter'`，重新打开vim后输入`:PluginInstall`后安装成功。\r\n注释的快捷键是`\\cc`，反注释是`\\cu`。其实和自己直接在vimrc中写没什么太大区别。\r\n其它注释插件大同小异，就不都说了。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362795383","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-362795383","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":362795383,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-03T10:08:18Z","updated_at":"2018-02-03T10:08:18Z","author_association":"OWNER","body":"## Vim里Insert模式下不能按Backspace删除前面的内容\r\n因为默认当前插入只能创建新内容，不允许改动别的东西。如果要变成Insert mode下随便编辑的模式，在`~/.vimrc`中加上：\r\n```\r\nset backspace=indent,eol,start\r\n```\r\n或者更简单的`set backspace=2`，效果一样。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363679206","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-363679206","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":363679206,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T07:19:11Z","updated_at":"2018-02-07T07:24:43Z","author_association":"OWNER","body":"# Vim中Tab变Space等相关设置\r\nTab和Space之争和Vim于Emacs是一样等，我是Vim和Space派。但是我和大多数人一样喜欢按Tab出Space。\r\n在`~/.vimrc`中设置如下，重启vim就会生效：\r\n```\r\nset autoindent \"换行时自动缩排 同时对应的还有其它两种模式 smartindent, cindent\r\nset tabstop=4 \"设定tab宽度为4个字符\r\nset shiftwidth=4 \"设定自动缩进为4个字符\r\nset expandtab \"用space替代tab的输入 取消的话 就用set noexpandtab \"不用space替代tab的输入\r\nretab \"打开文件时自动转换所有tab为空格\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363682254","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-363682254","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":363682254,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T07:36:16Z","updated_at":"2018-02-07T07:42:24Z","author_association":"OWNER","body":"# Vim快捷命令\r\n\r\n- 上下行调换位置：`ddp`\r\n- 前后字符调换位置：`xp`\r\n\r\n### 删除命令\r\n- 删至行尾：`d$`\r\n- 删至行头：`d0`\r\n- 此行以前所有行全部删除：`dgg`\r\n- 此行以前所有行全部删除：`dG`\r\n- 删除扩号之间内容：`di(` 注意，它非常只能，会识别到离自己最近的一组括号组\r\n- 删除？号之间等内容：和引号之间一样，用`di`+符号，如单引号`di'`、双引号`di\"`等。\r\n\r\n### 删除、复制引号，括号中的内容\r\n参考[这篇文章](http://blog.csdn.net/YHM07/article/details/44522315)。\r\n下面的符号可以是`'   \"  [  (  { `等，注意都是左半边。\r\n\r\n以下的命令对标点内的内容操作\r\n1. `ci`+符号：分别更改这些配对符号中的内容 \r\n2. `di`+符号：分别删除这些配对符号中的内容 \r\n3. `yi`+符号：分别复制这些配对符号中的内容 \r\n4. `vi`+符号：分别选中这些配对符号中的内容 \r\n\r\n如果把上面各条命令中的`i`改成`a`,可以连配对符号一起操作"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363687790","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-363687790","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":363687790,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T08:04:19Z","updated_at":"2018-02-07T08:06:46Z","author_association":"OWNER","body":"# Vim Movement Commands\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35904841-a4c7c586-0c1f-11e8-9ae0-374cb310541a.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363688801","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-363688801","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":363688801,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T08:08:27Z","updated_at":"2018-02-07T08:12:46Z","author_association":"OWNER","body":"# Vim产生的`.swp`文件\r\n参考文章：[VIM不正常退出产生的swp文件](http://blog.csdn.net/pwiling/article/details/51830781)\r\n常用关于swp文件的命令或`vimrc`配置：\r\n- 查看当前目录下的所有swp文件: `vim -r`\r\n- 恢复文件：`vim -r filename`，上次意外退出没有保存的修改，就会覆盖文件。\r\n- 停止vim产生交换文件：在`~/.vimrc`中加入`set noswapfile`\r\n- 定时自动保存文件：\r\n```\r\nset updatetime=23000 \" 设置每200个字符保存一次\r\nset updatecount=400 \" 设置每4秒保存一次\r\n\" set updatecount=0 \" 不保存交换文件\r\n```\r\n- 设置交换文件默认目录：`set directory=./tmp`"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363690818","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-363690818","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":363690818,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T08:16:58Z","updated_at":"2018-02-07T08:29:22Z","author_association":"OWNER","body":"# Vim自动运行（或编译运行）文件\r\n不像SublimeRepl需要安装插件，Vim原生支持直接运行python等代码。只要输入命令：\r\n`:!python %`\r\n其它语言代码类似。\r\n输入命令后，vim界面会暂时跳出编辑页面跳到终端页面显示执行过程，期间可以按任意键返回vim编辑页面。\r\n输过一次后，就可以用`:!!`直接重复上次的命令，不用再输一遍命令。\r\n![screencast 2018-02-07 16-17-40](https://user-images.githubusercontent.com/14041622/35906002-00ab9e64-0c24-11e8-86c6-a72026149396.gif)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363731317","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-363731317","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":363731317,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T10:50:02Z","updated_at":"2018-02-07T10:50:02Z","author_association":"OWNER","body":"# Vim左下角总显示\"recording\"\r\n这是因为不小心按到了`q`键，进入了录制宏模式。\r\n再按以下`q`就退出了。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364077006","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-364077006","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":364077006,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T10:58:51Z","updated_at":"2018-02-09T09:33:34Z","author_association":"OWNER","body":"# Vim支持鼠标滚动界面\r\nMac下，Vim支持鼠标滚动光标，通过光标移动上下翻动页面。但是这样太别扭了，我们需要的是滚轮控制界面滚动，如vim中`ctrl+e`一样的效果。\r\n简单：`~/.vimrc`中加一句`set mouse=a`即可。\r\n不过这样设置会导致每次用鼠标选择一段文本都会自动进入visual模式，这样的话我们就没法复制到系统剪切板了。\r\n网上说mouse后一个-好即可，如`set mouse-=a`，但是试过没用。\r\n这时候，需要按住`Alt`键然后再用鼠标选择文本，这样一来就不会启动v模式，且可以复制到剪切板。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364084270","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-364084270","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":364084270,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T11:30:38Z","updated_at":"2018-02-08T11:30:38Z","author_association":"OWNER","body":"# Vim里批量替换文字\r\n没有一般编辑器按快捷键那么方便，需要以输入一条命令的方式才能执行。\r\n格式如下：\r\n- 对当前行执行替换  `:s/查找内容/替换内容/g`\r\n- 在全文执行替换  `:%s/查找内容/替换内容/g`\r\n- 对选中行中内容进行批量替换  用v模式选中行然后`s/查找内容/替换内容/g`\r\n\r\n大概可以看到，`s`代表执行search命令，`%`代表全文执行，`/`是相当于分隔符，`g`代表global对指定范围内所有结果进行替换，如果没有`g`那么只替换第一个找到的结果。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364389741","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-364389741","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":364389741,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-09T10:02:42Z","updated_at":"2018-02-09T10:03:46Z","author_association":"OWNER","body":"# Vim 的Git插件 - `Fugitive`\r\n在vim里面操作，总是切换出去用git命令提交，一开始学习阶段还好，但是慢慢也烦了，就找到了这款最通用的插件，而且是Vundle管理器的默认搭配插件。\r\n[参考文章](http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/)。\r\n常用命令如下：\r\n![image](https://user-images.githubusercontent.com/14041622/36022290-9060671a-0dc3-11e8-98c7-6b37f7160f34.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366301592","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/25#issuecomment-366301592","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25","id":366301592,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T17:25:13Z","updated_at":"2018-02-20T08:25:48Z","author_association":"OWNER","body":"# Vim的NerdTree插件\r\n> 一个项目文件多起来时，左边的文件树菜单是必要的。\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/36320392-068694a6-1381-11e8-8c3d-adcb3ad94478.png)\r\n\r\n在vundle插件管理的方式，直接在`~/.vimrc`中的Plugin段落中加入`Plugin \"scrooloose/nerdtree\r\n\"`然后重启Vim并输入`PluginInstall`，即可完成安装\r\n\r\n然后输入`: NERDTreeToggle`即可打开文件树。当然，默认是关闭的，需要每次都输入命令打开。\r\n还可以设置vim快捷键来映射,在vimrc中加入：\r\n```\r\nmap <F3> :NERDTreeMirror<CR>\r\nmap <F3> :NERDTreeToggle<CR>\r\n```\r\n\r\n常用文件树快捷键：\r\n```\r\nCtrl+ww:左侧文件夹目录窗口与文件编辑窗口之间的切换\r\no:打开关闭文件或者目录，如果是文件的话，光标出现在打开的文件中\r\ngo:效果同上，不过光标保持在文件目录里，类似预览文件内容的功能\r\ni:水平分割窗口打开文件\r\ns:纵向分割窗口打开文件\r\nt:在标签页中打开\r\nT:在后台标签页中打开\r\np:到上层目录\r\nP:到根目录\r\nK:到同目录第一个节点\r\nJ:到同目录最后一个节点\r\nm:显示文件系统菜单（添加、删除、移动操作）\r\n?:帮助\r\nq:关闭\r\n```\r\n\r\n## 存在问题\r\n目前问题是，不能保存所有打开文件的状态。在同一个tab中打开另一个文件时，之前文件的编辑历史都会丢失，也就是没法`u`撤销编辑。\r\n即使有相关的方法控制这些，只是作为一个文件菜单来说，这也太麻烦了。"}]