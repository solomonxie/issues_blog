[{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/359676403","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-359676403","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":359676403,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-23T04:55:21Z","updated_at":"2018-01-23T04:55:21Z","author_association":"OWNER","body":"## 命令行添加文字颜色\r\n> 不是终端的颜色主题，只加了颜色主题但是文字还是同样颜色，其实没什么用。主要就是要类似于语法高亮的功能，要不然命令行里源源不断的一页一页的字冒出来实在不好读。\r\n\r\n### 方案一：直接添加Terminal的配置文件\r\nMac中和Linux是一样的，直接在本用户的根目录添加一个`.bash_profile`文件写入配置，打开颜色开关即可。\r\n```shell\r\n$ vi ~/.bash_profile\r\nexport CLICOLOR=1\r\n```\r\n但是效果不佳，开关顶多加上了`ls`文件夹的颜色，没什么大用。如图：\r\n![image](https://user-images.githubusercontent.com/14041622/35258738-783302ae-003c-11e8-9443-f65288c59c7c.png)\r\n所以就需要再进一步找一个靠谱的解决方案。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/359691008","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-359691008","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":359691008,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-23T06:39:04Z","updated_at":"2018-02-16T17:10:59Z","author_association":"OWNER","body":"## Bash shell / Zsh 里修改前缀 (隐藏用户@主机，添加Git分支名称)\r\n> 每次在命令行里进入有git的文件夹，都没什么显示，不像网上其他人截屏出来的样子，就好奇怎么弄的。下面分bash和zsh两种方式分别来说。\r\n`注：`这里都是使用的Mac Terminal.app做实验，Mac的iTerm或Linux上的终端没有做实验，但是操作不会有太大差异。\r\n\r\n### 1. Bash的修改方法\r\n其实特简单，还是在`~/.bash_profile`文件中添加：\r\n```shell\r\n$ vim ~/.bash_profile\r\n\r\n# Shows Git branch name in prompt.\r\nparse_git_branch() {\r\n  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\r\n}\r\nexport PS1=\"\\u@\\h \\W\\[\\033[32m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\r\n# Or hide User @ Name (still with git branch name)\r\n# export PS1=\"\\W\\[\\033[32m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\r\n```\r\n效果如下：\r\n![image](https://user-images.githubusercontent.com/14041622/35312980-08149de4-00f9-11e8-8eee-cf6f955f6957.png)\r\n\r\n### 2. Zsh的修改方法\r\n类似于Bash，在`~/.zshrc`这个文件中修改，打开后，随便找个位置（最好靠上面一点方便查看）加上一行`DEFAULT_USER=$USER `即可。如果为zsh安装了`Oh my zsh`这个工具（一般玩zsh第一步就是安装它），这里就不需要单独处理像Bash一样手动编程添加Git名称了，因为会自动出现。进入zsh后，可以看到效果如下：\r\n![image](https://user-images.githubusercontent.com/14041622/35313348-c698b510-00fa-11e8-86ad-b6c81ddd8d8c.png)\r\n\r\n当然，我这里的Git分支还配上了图标和颜色等，这都需要给终端（这里是Mac Terminal.app)安装相应配色方案，我用的是著名的`Solarized Dark`配色方案。具体配色和字体问题（字体用来支持图标，因为那些图标的本质是文字），需要专开一篇来说。\r\n\r\n## Zsh中将全路径缩短为当前文件夹名\r\n有时候经常嫌一层一层目录实在太长太占地方，而且截屏时也不方便把全路径显示出来。所以需要隐藏起来会比较方便，需要看全路径的话一句`pwd`就显示了。\r\n默认全路径显示：\r\n![image](https://user-images.githubusercontent.com/14041622/36319855-3ce060c4-137f-11e8-9a8c-f5a348663074.png)\r\n\r\n修改后效果：\r\n![snip20180217_106](https://user-images.githubusercontent.com/14041622/36319878-52602c72-137f-11e8-915e-b7dcc1f18db0.png)\r\n\r\nZsh中，配置文件`~/.zshrc`里面可以配置`DEFAULT_USER=$USER`来隐藏用户名和主机名，下面还有一句`prompt_context() {}`设定一般来说是可以写入函数来隐藏全路径并只显示当前文件夹的。\r\n但是配置了agnoster配色主题后，怎么修改好像都没用，参考[这篇文章](http://bugcode.net/2016/05/03/zsh-iTerm2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/)，得知，只要到agnoster配色主题的配置文件中改一个字即可：\r\n找到文件：一般是在这个位置`~/.oh-my-zsh/themes/agnoster.zsh-theme`，打开后找到`prompt_dir() {}`这个函数，然后将`prompt_segment blue black '%~'`最后面的~改为c即可：`prompt_segment blue black '%c'`。\r\n![image](https://user-images.githubusercontent.com/14041622/36319801-1340a8b4-137f-11e8-8054-bc8ab90d0812.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/359705202","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-359705202","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":359705202,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-23T07:52:26Z","updated_at":"2018-01-30T12:29:30Z","author_association":"OWNER","body":"## 安装并配置zsh\r\n> `zsh`原称为**Z Shell**。也是一种shell，兼容最常用的bash这种shell的命令和操作，并且有很多增强，超强的订制性。查来查去，bash虽然很标准，但是自己日常的话还是不要太偏执，力求简单方便的工具更好，所以就玩弄起了zsh。超漂亮又简单,也很好上手。\r\n\r\nMac原生就安装了zsh，linux的话需要安装一下，简单如`sudo apt-get install zsh`这样就安装好了。\r\n可以先通过`cat /etc/shells`查看自己有哪些shell，一般都会有很多种。\r\n使用方法很简单，直接在命令行里输入`zsh`就开始使用了。不过要变成每次打开终端默认使用zsh，则需要改配置。\r\n### 安装`Oh My Zsh`\r\n原本zsh就是很强大，但是配置超难，直到**Oh my zsh**工具出现，一切zsh的配置都变简单了。所以这是用zsh的必备工具，安装只需一句话：\r\n```shell\r\nsudo  curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh \r\n```\r\n屏幕显示这个图，就算安装好了：\r\n![image](https://user-images.githubusercontent.com/14041622/35263685-c564c77a-0054-11e8-9152-81b2071c28f5.png)\r\n然后再打开终端，感觉一切都变了：直接进入zsh，命令行前一大串的用户名主机等都被隐藏了，进入git文件夹时前面也都加上了`git (master)`这样的带颜色分支字样，按Tab自动补全时也不用区分大小写了(太棒了)。。。如下图\r\n![image](https://user-images.githubusercontent.com/14041622/35263813-3cbde8a6-0055-11e8-9437-da2506352be4.png)\r\n\r\n有一点需要注意，安装完oh my zsh后，机子(Mac)上的Terminal会变成默认打开就进入zsh。如果不习惯的话，可以改回默认先。Mac的Terminal在设置里将`shell open with`改成`/bin/bash`就好了：\r\n![image](https://user-images.githubusercontent.com/14041622/35265450-16b0e4a0-005b-11e8-9839-5a15c4eba114.png)"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360023723","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-360023723","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":360023723,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-24T05:18:07Z","updated_at":"2018-01-30T09:13:48Z","author_association":"OWNER","body":"## Mac终端配色方案 Color schemes\r\n\r\n要想配置出这种好看的方案，标配就是：`zsh` + `Meslo字体` + `Soloarized Dark显示方案` + `Agnoster配色方案`。网上有很多文章介绍，不过这里也简单总结个cheatsheet方便以后用。\r\n注：之前已经写了zsh和基本工具`oh my zsh`的安装方法了。后面都是在此基础上。\r\n![image](https://user-images.githubusercontent.com/14041622/35314446-2b49018a-0101-11e8-94bd-2f0d06322cbe.png)\r\n\r\n### 1. 安装Solarized显示方案 (仅用于本地客户端应用)\r\n显示方案主要负责修饰命令行前缀，隐藏user@host，识别git文件夹，添加图标，命令高亮等。\r\n去`Solarized`官网下载一个[zip压缩包](http://ethanschoonover.com/solarized/files/solarized.zip)。压缩包中包含了这种颜色方案应用在各种各样平台、终端、软件的配置文件。找到自己用的终端文件夹。如我用的是Mac Terminal，那么就在`osx-terminal.app-colors-solarized`这个文件夹，将里面的`Solarized Dark ansi.terminal`文件导入到终端。如下图：\r\n![image](https://user-images.githubusercontent.com/14041622/35315201-f8f593ec-0105-11e8-9a9b-1b67b9385cbd.png)\r\n![image](https://user-images.githubusercontent.com/14041622/35315223-171b34b2-0106-11e8-9c7d-4c0e3f4a3895.png)\r\n在终端的配置里导入配色方案后，就出现了`Solarized Dark`选项，将其设为默认，重新打开终端，就出现基本的配色方案了。\r\n\r\n### 2. 安装字体 （仅用于本地客户端应用）\r\nSolarized配色包需要`Meslo LG M Regular for Powerline`这种字体才能显示各种特殊字符（图标），下载好ttf字体文件并安装。下载链接在这里[https://github.com/powerline/fonts/raw/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf](https://github.com/powerline/fonts/raw/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf)\r\n装好以后，可以在终端中输入这个来测试是否成功：\r\n```echo \"\\ue0b0 \\u00b1 \\ue0a0 \\u27a6 \\u2718 \\u26a1 \\u2699\"```\r\n如果能正常显示所有图标，则安装成功。\r\n然后打开终端的偏好设置，在当前`Solarized`的配色方案下，找到字体选项，选择`Meslo LG M Regular for Powerline`字体，成功。\r\n![image](https://user-images.githubusercontent.com/14041622/35315371-0582e28a-0107-11e8-8336-b2d2c7e8c75b.png)\r\n\r\n### 3. 设定Agnoster配色主题\r\n不同于如Solarized显示方案，配色主题单纯负责颜色问题。\r\n这个需要在Zsh配置文件`~/.zshrc`中配置，由于`agnoster`是Oh My Zsh工具自带，所以无需安装额外文件直接修改选项。\r\n找到`~/.zshrc`文件，将`ZSH_THEME`变量改成`agnoster`，保存并重新打开终端即可。如下图：\r\n![image](https://user-images.githubusercontent.com/14041622/35315665-9ef20526-0108-11e8-9726-c4d38fbd37c7.png)\r\n\r\n最后，我在Mac终端上显示效果如下：\r\n![image](https://user-images.githubusercontent.com/14041622/35315432-55a881c0-0107-11e8-93ed-0a179044f1aa.png)\r\n好像颜色哪里差了点，是因为它原生在iTerm终端才能发挥完全效果。效果如下：\r\n![image](https://user-images.githubusercontent.com/14041622/35315453-74bad900-0107-11e8-858a-eeb45c980857.png)\r\n\r\niTerm的配置方法和Terminal.app非常相似，自己在偏好设置中采用类似的操作即可。\r\n关于其它Oh My Zsh自带的色彩主题，可以到这里看效果：\r\n[https://github.com/robbyrussell/oh-my-zsh/wiki/Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360055044","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-360055044","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":360055044,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-24T08:22:25Z","updated_at":"2018-01-24T08:22:25Z","author_association":"OWNER","body":"## 终端里添加快捷路径\r\n> 一般要一路cd进入五层以上的目录，是真的有点头疼。所以研究了下有没有设置快捷路径的方法\r\n\r\n1. 方法一：设置系统变量\r\n通过在`~/.bash_profile`或`~/.zshrc`里面设置`export DIR=\"/path/path/path\"'这种来设置变量，然后引用是通过`$var`来引用。\r\n但是每次都加`$`确实有点不爽，好像也没达到什么特别快捷的方法。\r\n2. 方法二：alias\r\n直接设置`alias topath=\"cd /path/path/path\"`这种来设置别名，每次在终端直接输入类似topath，回车即可。这种方式是可取的。\r\n为了保证可管理性，建议所有的alias别名都放到`~/.bash_profile`这种用户自定义的终端配置文件里，方便以后备份移植。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360074467","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-360074467","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":360074467,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-24T09:39:56Z","updated_at":"2018-01-30T10:58:44Z","author_association":"OWNER","body":"## Zsh 常用插件\r\n> zsh有了各种插件后才真是如虎添翼，各种命令高亮，自动补全，命令参数辅助等。\r\n\r\n### zsh插件安装方法\r\n各种插件的安装方法各异，有的直接将插件文件夹拷贝到`~/.oh-my-zsh/custom/plugins`目录中，然后在`~/.zshrc`中的`plugins`数组中加入插件名即可；有的则需要配合别的工具并在`~/.zshrc`中加入别的命令。以下是几个常用的。\r\n安装时经常会看到一些`$ZSH_xx`变量，这些都是zsh或oh my zsh设置的各种变量，便于插件运用。我们安装插件时也可以用这些变量安装，如插件保存的位置一般为`$ZSH_CUSTOM/plugins/插件文件夹名/`。\r\n\r\n### Oh my zsh自带插件\r\n自带插件在安装时就已经存在了，默认是只开启了git一个插件。其它的话也很简单，只需要在`~/.zshrc`文件中添加引用即可。打开文件找到`plugins`数组，然后把插件名加入数组即算开启。\r\n如下图：\r\n![image](https://user-images.githubusercontent.com/14041622/35327373-6c0bd3fe-0134-11e8-832c-3a7bab28e17f.png)\r\n\r\n目前已经有的自带插件在官网Github中可以看到，[https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins)。\r\n凡是这里有的，都可以立刻生效。\r\n\r\n### Zsh命令自动补全插件 [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\r\n这里利用Oh my zsh的方法安装。直接一句话命令行里下载并移动到oh my zsh目录中：\r\n```shell\r\ngit clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\r\n```\r\n然后在`~/.zshrc`文件中找到plugins数组，加入`zsh-autosuggestions`名字，重新打开终端即可。\r\n\r\n### Zsh命令语法高亮插件 [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)\r\n将插件下载到oh my zsh的插件目录下的该新建插件同名文件夹中\r\n```shell\r\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\r\n```\r\n编辑`~/.zshrc`文件将然后将插件引用命令写入该文件最后一行（必须）\r\n```\r\n# Note the source command must be at the end of .zshrc\r\nsource \"$ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\"\r\n```\r\n保存重新打开即可看到高亮的命令行了。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360403300","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-360403300","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":360403300,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-25T09:01:40Z","updated_at":"2018-01-25T09:02:16Z","author_association":"OWNER","body":"### 终端里用Sublime Text或其他应用程序打开文件\r\nMac下的Sublime Text的位置是`/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl`\r\n所以我们直接用alias别名引用它就好了。\r\nBash的话在`~/.bash_profile`里，zsh的话在`~/.zshrc`里，直接加入这句话：\r\n```\r\nalias subl=\"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl\"\r\n```\r\n然后就可以直接命令行里打开编辑器了：\r\n```\r\nsubl ~/readme.txt\r\n```\r\n执行后会弹出Sublime Text编辑器，并打开readme.txt文件。\r\n\r\n**同理，换成其它编辑器，或在其它系统里，也是这样修改流程**\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360572907","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-360572907","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":360572907,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-25T19:25:50Z","updated_at":"2018-01-25T19:25:50Z","author_association":"OWNER","body":"## ffmpeg 超强视频处理程序\r\n> 开源视频处理几乎必用的一个程序，功能强大。\r\n\r\n## Installation\r\n\r\n```\r\n# for Ubuntu 14.04 (no need to install on 15.04)\r\nsudo add-apt-repository ppa:mc3man/trusty-media\r\nsudo apt-get update\r\nsudo apt-get dist-upgrade\r\nsudo apt-get install ffmpeg -y\r\n```\r\n\r\n## 以最低CPU优先率执行命令\r\n\r\n```\r\nnice -19 ffmpeg 各种参数\r\n```\r\n\r\n## .webm to .mp4\r\n\r\n```\r\nnice -19 ffmpeg -i input.webm -c:v libx264 -crf 20 -c:a aac -strict experimental out.mp4\r\n```\r\n\r\n## Split Video\r\n\r\n```\r\n# 不转码截取片段（）\r\nnice -19 ffmpeg -i \"input.mp4\" -ss 00:03:25 -to 00:05:42 -c copy \"output.mp4\"\r\n```\r\n\r\n## 调整音频与视频匹配不上的问题\r\n\r\n### 方法1\r\n\r\n```\r\nnice -19 ffmpeg -i \"input.mp4\" -itsoffset 2.0 -i \"input.mp4\" -vcodec copy -acodec copy -map 0:0 -map 1:1 \"output.mp4\"\r\n```\r\n\r\n### 方法2: 一开始就分开截取音频视频 然后再合并\r\n\r\n```\r\n# ...\r\n```\r\n\r\nffmpeg的参数顺序很重要, 不同的顺序造成截然不同的结果\r\n\r\n## 切割视频\r\n\r\n```\r\n# 从指定开始点到指定结束点\r\nffmpeg -i 文件名 -ss 01:00:00 -t 00:06:00  -vcodec copy -acodec copy 输出文件名\r\nffmpeg -i 文件名 -ss 00:01:00 -to 00:02:00 -c copy 输出文件名\r\n# 从指定开始点到指定时长\r\nffmpeg -ss 00:01:00 -i 文件名 -to 00:02:00 -c copy 输出文件名\r\n# 调整音频匹配不上的问题 #方法1\r\nffmpeg -i \"test.mp4\" -itsoffset 2.0 -i \"test.mp4\" -vcodec copy -acodec copy -map 0:0 -map 1:1 \"new.mp4\"\r\n\r\n# 调整音频匹配不上的问题 #方法2: 一开始就分开截取音频视频 然后再合并\r\n# \r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361221403","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-361221403","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":361221403,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-29T11:46:29Z","updated_at":"2018-01-29T11:46:29Z","author_association":"OWNER","body":"## cd命令常用技巧\r\n- `cd ~`  进入用户主目录，`cd 空格`也行；\r\n- `cd -`  返回进前一个所在目录；\r\n- `cd ..`  返回上级目录；\r\n- `cd ../..`  返回上两级目录；\r\n- `cd !$`  把上个命令的参数作为cd参数使用"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361253616","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-361253616","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":361253616,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-29T14:00:52Z","updated_at":"2018-01-29T14:00:52Z","author_association":"OWNER","body":"## rm 删除文件和文件夹\r\n- `rm 文件名`删除文件\r\n- `rm -rf 文件夹` 删除文件夹及其内所有文件"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361523235","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-361523235","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":361523235,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-30T09:04:56Z","updated_at":"2018-01-30T12:29:42Z","author_association":"OWNER","body":"# 修改终端默认的shell\r\n之前说过了，一般终端的默认Shell只要在终端应用如Terminal.app,iTerm2等的系统设置里直接改就好了。\r\n但是如果我们要用ssh登录服务器就不能这么设置了，需要用到`chsh`这个命令。很简单\r\n如果不懂的话，直接 `man chsh`就可以看到很简单的描述--改变登录shell。\r\n首先要查到当前机器有哪些以安装的shell，`cat /etc/shells`。\r\n![image](https://user-images.githubusercontent.com/14041622/35557228-749dbabe-05df-11e8-94a5-1311fcb87c62.png)\r\n我的默认有这些，可以看到zsh位于`/bin/zsh`，那么如果想要将zsh改为默认，就直接在终端里输入：\r\n```\r\nchsh -s /bin/zsh\r\n```\r\n即可达到修改默认终端的效果。如果是ssh连接服务器的话，需要重连才能看到效果。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/361560402","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-361560402","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":361560402,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-30T11:07:50Z","updated_at":"2018-01-30T11:07:50Z","author_association":"OWNER","body":"## Mac在终端上的快捷键\r\n> 一开始是为了找翻屏（上下滚动）的快捷键，Windows和Linux上一般PageUp, PageDown即可，Macbook上没有这两个键，所以还挺难找的。后来查了一系列其它的终端快捷键，如下：\r\n\r\n- `Cmd+Up` 向上滚动\r\n- `Cmd+Dn` 向下滚动\r\n- `Fn+Left` 和`Ctrl+A`一样，移到命令行最左端\r\n- `Fn+Right` 和 `Ctrl+E`一样，移动的命令行最右端\r\n- `Ctrl+U` 删除当前命令行\r\n- `Ctrl+K` 删除当前光标后的所有内容"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362783676","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-362783676","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":362783676,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-03T06:08:48Z","updated_at":"2018-02-03T06:08:48Z","author_association":"OWNER","body":"## Bash里读取Json数据\r\n查看Stackovervlow, 发现[答案](https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools)，既可以使用`sed+awk`来自己写解析读取json，也可以通过引用python方法来更方便的解析。推荐python方法，如下：\r\n```bash\r\necho '{\"hostname\":\"test\",\"domainname\":\"example.com\"}' | python -c 'import json,sys;obj=json.load(sys.stdin);print obj[0][\"hostname\"]'\r\n```\r\n由于*nix都原生带有python，所以这么执行是没问题的。而且一般也不用考虑到执行速度问题。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362794005","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-362794005","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":362794005,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-03T09:40:58Z","updated_at":"2018-02-03T09:40:58Z","author_association":"OWNER","body":"# Bash所有键盘快捷键\r\n[菜鸟教程](http://www.runoob.com/w3cnote/bash-shortcut.html)"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364071303","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-364071303","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":364071303,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T10:37:11Z","updated_at":"2018-02-08T10:37:22Z","author_association":"OWNER","body":"# Linux 创建多级目录 | 多层次文件夹\r\n- `mkdir <folder>` 创建单层文件夹, 比如`mkdir ./src`。不能创建多层，不能重复创建\r\n- `mkdir -p <path>` 创建多层次文件夹，可以重复创建同一个文件夹。如`mkdir -p ./src/s/e/w/asdf`"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364664199","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-364664199","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":364664199,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T15:46:04Z","updated_at":"2018-02-20T15:05:11Z","author_association":"OWNER","body":"# 读取和写入剪切板数据\r\n目前剪切板的操作原生支持还不是很完善，windows/mac/linux的工具都不一样，而且如果不是自己写脚本的话很难原生支持剪切板里的图片读取和写入。\r\n\r\n## Mac 自带`pbcopy`和`pbpaste`\r\n```shell\r\n# 写入剪切板\r\n$ echo 'hihihi' | pbcopy\r\n#或\r\n$ pbcopy < echo 'hello'\r\n\r\n# 读取剪切板\r\n$ pbpaste\r\n# 保存剪切板内容到文件\r\n$ pbpaste > ~/test.txt\r\n```\r\n\r\n## Mac处理剪切板图像\r\n目前没有原生支持剪切板的文字之外的类型。所以必须要下载第三方应用。\r\n### [`pngpaste`最简单的剪切板图像转文件工具](https://github.com/jcsalterego/pngpaste) \r\nmac上直接`brew install pngpaste`，完成后一句`pngpaste path-to-img.jpg`即可在指定位置生成图片文件。没有特别option选项，仅此一句。\r\n经过测试，能支持截图软件、浏览器、mac图片预览等的右键点击copy得来的常用图像。但是不支持直接在文件上`ctrl+c`这样拷贝来的图片。\r\n官方的图像类型支持说明：\r\nSupported input formats are `PNG, PDF, GIF, TIF, JPEG`.\r\nSupported output formats are `PNG, GIF, JPEG, TIFF`.\r\nOutput formats are determined by the provided filename extension, falling back to PNG.\r\nIt's unclear if EXIF data in JPEG sources are preserved. There's an issue with pasting into JPEG format from a GIF source.\r\n\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365248925","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-365248925","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":365248925,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T12:11:06Z","updated_at":"2018-02-13T12:11:06Z","author_association":"OWNER","body":"## 查看本地存储空间情况\r\n\r\n### `$ df -h`就可以查看本地各处的存储情况了。下图是我的树莓派存储：\r\n![image](https://user-images.githubusercontent.com/14041622/35480902-b5b50f3a-0453-11e8-892e-d1f9be0ee8d6.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365250523","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-365250523","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":365250523,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T12:18:45Z","updated_at":"2018-02-13T12:18:45Z","author_association":"OWNER","body":"# `scp`命令在服务器上传下载文件\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365352191","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-365352191","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":365352191,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T18:05:17Z","updated_at":"2018-02-13T18:05:28Z","author_association":"OWNER","body":"# 命令行里打印日期\r\n```shell\r\n# 注意是反引号 因为是要执行date命令\r\necho `date`   \r\n\r\n# 一个好用的技巧，快捷键commit\r\nalias gc = \"git add . && git commit -m \\\"`date`\\\" \"\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365366333","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-365366333","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":365366333,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T18:52:48Z","updated_at":"2018-02-13T19:26:25Z","author_association":"OWNER","body":"# Linux 定时任务 `crontab`\r\n运行`crontab -e`后会自动跳进程序，在最底下一行写入执行命令，必须要按照格式写。\r\n格式是`* * * * * 命令`，其中前五个星号分别代表着第几分钟、第几小时、每月第几日、哪个月、星期几。要按照顺序替换*为一个数字，如果保持*，则表示任意。\r\n*还可以加运算符：\r\n[参考文章](https://segmentfault.com/a/1190000007478002)\r\n```\r\n*:任何时间\r\n/:每隔多久\r\n-:连续时间\r\n,:不连续的时间\r\n```\r\n[参考视频](https://www.youtube.com/watch?v=QZJ1drMQz1A)\r\n\r\n\r\n```shell\r\n# 每2分钟执行\r\n*/2 * * * * echo \"hello\" >> ~/test.txt\r\n\r\n# 每天执行\r\n** \r\n\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365387417","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-365387417","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":365387417,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T20:05:19Z","updated_at":"2018-02-13T20:06:03Z","author_association":"OWNER","body":"# Linux 设计系统时区和时间\r\n\r\n把程序运行在树莓派上时，获取的时间默认是美国的，这样记录日志之类的东西也都是美国时间会容易混淆。所以需要在命令行里修改系统时区。\r\n\r\n### 改时区\r\n我们在`/usr/share/zoneinfo`这个文件夹里可以看到各种各样的国家和时区，找到自己的时区后拷贝到`/etc/localtime`即可改变时区\r\n\r\n```shell\r\n# 中国是ROC\r\nsudo cp /usr/share/zoneinfo/ROC /etc/localtime\r\n\r\n# 验证\r\ndate\r\n```\r\n\r\n### 改时间\r\n一般其实不需要改时间，联网的话默认是从网上获取的。\r\n如果要改，[参考这篇文章](https://www.garron.me/en/linux/set-time-date-timezone-ntp-linux-shell-gnome-command-line.html)"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366214438","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-366214438","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":366214438,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T11:43:16Z","updated_at":"2018-02-16T14:52:40Z","author_association":"OWNER","body":"# 使服务器上的任务不间断运行\r\n> 通过ssh登录服务器运行一个python脚本，想让它24小时不间断运行。可是一旦我退出ssh，整个程序就断了。这是由于ssh的session特性——它本身就是一个session，连接上开启session，断开ssh连接则关闭session，关闭时所有你在这个session里运行的东西都会被中断。\r\n\r\n### 关于ssh关闭连接就关闭运行程序的问题，[在这里可以看到一些解决方案](https://askubuntu.com/questions/8653/how-to-keep-processes-running-after-ending-ssh-session)。\r\n\r\n## 解决方案一：`tmux`\r\n\r\n很幸运，在学习怎么把vim分屏浏览时知道了tmux，然后看tmux视频时学到：原来ssh是这样的特性，断开就会停止所有之前连接ssh期间运行的所有processes，而tmux的核心业务不在于把屏幕分成几块好看，而是它能保存session！而且还能多端实时直播session！\r\n\r\n### 解决方案二：`nohup`\r\n网上一般说到不间断任务，一般也都会先提到这个，可以说是常规方案。\r\n\r\n### 解决方案三：`screen`或`byobu`\r\n这据说是现在更常用的方法，[参考文章](https://www.howtogeek.com/howto/ubuntu/keep-your-ssh-session-running-when-you-disconnect/)。\r\n\r\n### 解决方案四：`disown`\r\n据说的最简单方案：在命令后加`&`或者用`ctrl+z`把任务转到后台，然后用`disown -a`将任务解除与当前session的关联（意思就是当前session关闭也不影响它）"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366253734","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-366253734","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":366253734,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T14:42:54Z","updated_at":"2018-02-19T15:57:35Z","author_association":"OWNER","body":"# `tmux`的超绝便利\r\n> 上面提到服务器的任务不间断运行，就是利用了tmux的特性。就是说，一般ssh是断开就会停止所有之前连接ssh期间运行的所有processes，而tmux的核心业务不在于把屏幕分成几块好看，而是它能保存session！而且还能多端实时直播session！\r\n\r\n了解tmux的安装和使用已经理解，这个[短视频](https://www.youtube.com/watch?v=BHhA_ZKjyxo)足矣！如果想试试tmux的session共享，让别的机器或别人像直播一样看你在命令行里打字、操作，也用tmux一句话即可，参考[这个视频](https://www.youtube.com/watch?v=norO25P7xHg)。\r\n\r\n我万万没想到，将vim打造成IDE、将脚本不间断运行、让任务运行状态多处可观看的tmux，是这么简单。\r\n一句`sudo apt-get install tmux`就安装好，一句`tmux`就开启，一句`tmux new -s <session-name>`就可以创建和保存session。超绝！\r\n\r\n### 常用操作[快捷键参考](https://gist.github.com/ryerh/14b7c24dfd623ef8edc7#%E5%90%8C%E6%AD%A5%E7%AA%97%E6%A0%BC)\r\n\r\n## Tmux无法持久保存session\r\n它虽然好用，但是缺点是关机的话session就全都消失了。要解决这点，需要安装单独的插件。\r\n这个时候你就需要`Tmux-Resurrect`插件来了，[地址在这](https://github.com/tmux-plugins/tmux-resurrect)。\r\n插件说明里很清楚的写了，tmux一旦关机，就会失去一切的设置。所以还必须用插件来解决。\r\n安装方法：\r\n\r\n## Tmux安装[插件管理器TPM](https://github.com/tmux-plugins/tpm)\r\n和vim一样的思路，需要先安装tmux专属的插件管理器，一般都是用这个：`tmux plugin manager`，即tpm。注意：文档里面都会提到`prefix + ...`，其中`prefix`指的是tmux的命令前缀，默认是`ctrl+b`。\r\n\r\n按照[官网](https://github.com/tmux-plugins/tpm)的做法，很简单就安装上了，输入下面命令：\r\n```\r\n# 把管理器文件安装到`~/.tmux/plugins/tpm`之下 此前这些目录是不存在的\r\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\r\n\r\n# 新建配置文件\r\ntouch ~/.tmux.conf\r\nvim ~/.tmux.conf\r\n\r\n# 将下面内容复制到`~/.tmux.conf`\r\n# List of plugins\r\nset -g @plugin 'tmux-plugins/tpm'\r\nset -g @plugin 'tmux-plugins/tmux-sensible'\r\n# Other examples:\r\n# set -g @plugin 'github_username/plugin_name'\r\n# set -g @plugin 'git@github.com/user/plugin'\r\n# set -g @plugin 'git@bitbucket.com/user/plugin'\r\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\r\nrun '~/.tmux/plugins/tpm/tpm' \r\n\r\n# 在tmux运行的时候，找到任意窗口输入下面这个完成安装管理器：\r\ntmux source ~/.tmux.conf\r\n```\r\n\r\n## tmux安装插件\r\n在tpm管理器基础上，我们直接到`~/.tmux.conf`文件里的`List of plugins`部分，写入插件名称，然后按`Ctrl+b`，再按`Ctrl+I`，这里面是大写的i。然后程序就会自动下载安装好插件了。\r\n\r\n### 安装[`tmux-resurrect`](https://github.com/tmux-plugins/tmux-resurrect)插件\r\n由于tmux不能持久保存session的特性，我们需要安装这个插件来将session的设置完全保存到本地，然后重启后也能够快速恢复窗口等设置的内容。\r\n首先在`~/.tmux.conf`文件的`List of plugins`部分加入这句话：\r\n```\r\nset -g @plugin 'tmux-plugins/tmux-resurrect'\r\n```\r\n保存好后，在tmux的任意窗口按`ctrl+b`及大写的`I`，即可完成下载安装。\r\n\r\n#### 用法\r\n- `prefix + Ctrl-s` - 保存session\r\n- `prefix + Ctrl-r` - 恢复session\r\n\r\n## Tmux中的vim等软件颜色丢失\r\n这是因为tmux默认TERM没有用256color，那么每次运行tmux时指定color即可,`TERM=screen-256color-bce tmux`，或者更简单一点，在`~/.bash.profile`或者`~/.zshrc`中设置别名：\r\n```\r\nalias tmux=\"TERM=screen-256color-bce tmux\"\r\n```\r\n然后在`~/.tmux.conf`文件中加入这句话：\r\n```\r\nset -g default-terminal \"xterm-256color\"\r\n```\r\n\r\n## Tmux中鼠标滚屏不能用\r\ntmux中鼠标滚屏默认是关闭的，且不是很容易像开关一样开启支持。\r\n看过了一些stackoverflow尝试了一些解决方案，发现没有一个管用。如果比这个还麻烦，暂时我就觉得没有必要再折腾了，直接用原生的屏幕滚动浏览快捷键即可：\r\n`Prefix + [`，然后直接用上下箭头，或者PnUp和PnDown即可"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366262517","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-366262517","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":366262517,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T15:14:05Z","updated_at":"2018-02-16T17:51:24Z","author_association":"OWNER","body":"# `tail`命令实时监控某文件变化\r\n> 一般我们在程序生成log日志时，会想到用`cat`去查看内容。但是要想在程序运行过程中实时查看内容的变化，cat就不够好了，总不能手动一遍一遍去查吧。`tail`命令就可以解决这个问题，它让你像看直播看文件内容。\r\n\r\n![screencast 2018-02-16 23-18-15](https://user-images.githubusercontent.com/14041622/36314429-d0ef2634-136f-11e8-8a14-bcbd04594dfd.gif)\r\n\r\n目前，"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366413289","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-366413289","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":366413289,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-17T03:35:15Z","updated_at":"2018-02-17T06:06:03Z","author_association":"OWNER","body":"# Linux 标准输出(stdout)和标准错误(stderr)的重定向\r\n> 以前经常会听到这些词，还有标准输入之类，完全不明所以。直到最近需要让python脚本里的print内容打印到日志文件里，才开始研究这到底是什么。\r\n\r\n\r\n原来，`标准输出(stdout)`指的就是在命令行里，每次你输入指令后，终端上打印出来的那些话，那些反馈。`标准错误(stderr)`跟标准输出差不多，只不过是程序出错时反馈的内容。`标准输入(stdin)`就是程序指示让你输入用户名密码之类的这种，这里不多谈输入。\r\n\r\n问题是，我们很常用的会让一些脚本自己在后台24/7运行，这种时候脚本的输出内容到屏幕上（标准输出）也没什么意义，我们看不到也保存不了。所以最好让它把反馈的内容全部直接写如一个文件里，我们叫日志文件，其实就是个txt。然后我们自己可以查看日志来看到底发生了什么。\r\n\r\n\r\n#### 这种把显示到屏幕的程序反馈，变成存到文件里的动作，我们叫做`输出重定向(stdout redirection)`\r\n\r\n在命令行里，我们可以用符号直接把程序输出`转向`到某个文件或某个程序，如下：\r\n```shell\r\n$ git push > log.txt\r\n```\r\n然后，理论上我们平常`git push`后的反馈就会保存到`log.txt`这个文件里了，且屏幕上不会显示任何东西。\r\n但其实这个还是有问题的，因为事后我们发现有一些存到了log.txt，还有一些话漏网显示到了屏幕上，没存进去文档里。\r\n其实原来这些显示到屏幕上的反馈有些是`stdout`有些是`stderr`，我们用`>`或`>>`符号重定向，只是默认重定向`stdout`，没有重定向`stderr`，所以会有漏网之鱼。对此，我们需要了解下这个符号的设定，和怎么把`stderr`也包括进来，一起重定向过去。\r\n\r\n## 重定向符号和语句\r\n稍微会一点点linux命令的，都会用到`cmd > file`这样的语句，把命令反馈的输出到一个文件里。当然还有`cmd >> file`，这是把内容追加到文件里，而不是重新擦写一遍。`>`这个符号可以念`redirect to`。\r\n实际上，重定向有很多种设置和配合，让你可以分别重定向标准输出和标准错误，或者一起重定向，然后还可以选择是只输出到文件里还是同时输出大显示屏上和文件里。\r\n这里我们就要了解一下设置重定向的基本语法了，如下：\r\n\r\n- `>`   以擦写的模式重定向至... \r\n- `>>` 以追加的模式重定向至...\r\n- `1`  代表`stdout`标准输出\r\n- `2` 代表`stderr`标准错误\r\n\r\n所以，`cmd > file`实际上是缩略了的写法，理解起来，应该是`cmd &1> file`，也就是只把标准输出转出去。\r\n那么同理，只把标准错误转出去，就应该是`cmd &2> file`。\r\n其中，`&`符号没任何实际意义，只是以至区分，代表后面的符号是要设置重定向用的，而不是某个文件的名字。\r\n\r\n## `2>&1`\r\n每次查重定向问题时，我们总会看到这句话，一般人很难理解这到底是在干嘛。我一开始以为是2要大于1什么的，真是笑话。\r\n其实这是个重定向的设置，设置让2重定向到1，也就是让`stderr`标准错误重定向到`stdout`标准输出，然后两个并在一起再重定向。其中`&`没什么意思只是区分开来1是代表`stdout`而不是代表一个文件名。\r\n用起来的格式是：`cmd > file 2>&1`。\r\n为什么设置要放在后面呢?\r\n具体暂时还不知道，只知道是这么用，放在前面还不行只能放在后面。\r\n\r\n比如：\r\n```shell\r\n$ git push > log.txt 2>&1\r\n```\r\n那么这时候，屏幕上就真的不会显示任何东西了，标准输出、标准错误，全部都会存到log.txt文件里了。\r\n\r\n## 常用重定向及解释\r\n\r\n#### 参考文章：[stackoverflow回答](https://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file)\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/36338289-cdaec1d4-13e5-11e8-98e0-1181c1510bf8.png)\r\n\r\n- `command > output.txt`\r\n\r\nThe standard output stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, it gets overwritten.\r\n\r\n- `command >> output.txt`\r\n\r\nThe standard output stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, the new data will get appended to the end of the file.\r\n\r\n- `command 2> output.txt`\r\n\r\nThe standard error stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, it gets overwritten.\r\n\r\n- `command 2>> output.txt`\r\n\r\nThe standard error stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, the new data will get appended to the end of the file.\r\n\r\n- `command &> output.txt`\r\n\r\nBoth the standard output and standard error stream will be redirected to the file only, nothing will be visible in the terminal. If the file already exists, it gets overwritten.\r\n\r\n- `command &>> output.txt`\r\n\r\nBoth the standard output and standard error stream will be redirected to the file only, nothing will be visible in the terminal. If the file already exists, the new data will get appended to the end of the file..\r\n\r\n- `command | tee output.txt`\r\n\r\nThe standard output stream will be copied to the file, it will still be visible in the terminal. If the file already exists, it gets overwritten.\r\n\r\n- `command | tee -a output.txt`\r\n\r\nThe standard output stream will be copied to the file, it will still be visible in the terminal. If the file already exists, the new data will get appended to the end of the file.\r\n\r\n- `(*)`\r\n\r\nBash has no shorthand syntax that allows piping only StdErr to a second command, which would be needed here in combination with tee again to complete the table. If you really need something like that, please look at \"How to pipe stderr, and not stdout?\" on Stack Overflow for some ways how this can be done e.g. by swapping streams or using process substitution.\r\n\r\n- `command |& tee output.txt`\r\n\r\nBoth the standard output and standard error streams will be copied to the file while still being visible in the terminal. If the file already exists, it gets overwritten.\r\n\r\n- `command |& tee -a output.txt`\r\n\r\nBoth the standard output and standard error streams will be copied to the file while still being visible in the terminal. If the file already exists, the new data will get appended to the end of the file.\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366427093","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-366427093","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":366427093,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-17T08:45:38Z","updated_at":"2018-02-17T08:45:38Z","author_association":"OWNER","body":"# Linux生成随机数\r\n`echo $RANDOM`即可生成一个5位数的随机数。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366760115","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-366760115","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":366760115,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-19T17:34:19Z","updated_at":"2018-02-19T17:34:19Z","author_association":"OWNER","body":"# 进入`docker`的世界\r\n> 最近学习Machine Learning发现好多人都用docker，之前一直听说但是感觉和自己无关。但是现在发现原来docker是个这么方便的东西，可以跨平台（不分什么版本的linux，甚至mac和windows也行）运行。所以这里开一篇来记录学习感谢。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366966079","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/27#issuecomment-366966079","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/27","id":366966079,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-20T12:44:05Z","updated_at":"2018-02-20T12:45:57Z","author_association":"OWNER","body":"# Linux查看文件及文件夹大小\r\n`du 文件或目录名`\r\n比如`du ~/`会显示用户目录下所有文件、文件夹的大小，包括所有的子文件夹。不过这样不是很方便看，一字排开太多了。\r\n所以一般用 `du -d 0 ~/`来看特地这个文件夹的总大小，`-d  0`代表max depth为0.\r\n\r\n更人性化的设置是加上`-h`，这样就会显示k, M , G等大小单位，更方便看。\r\n如`du -h ~/movie.mp4`，就会显示`200M`这样的。"}]