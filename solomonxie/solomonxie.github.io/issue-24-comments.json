[{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360573224","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-360573224","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":360573224,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-25T19:26:57Z","updated_at":"2018-02-14T10:54:17Z","author_association":"OWNER","body":"# Get System Arguments 获取系统参数\r\n\r\n```python\r\nimport sys\r\n\r\n# 输出文件名\r\nprint sys.argv[0]\r\n\r\n# 输出第一个参数\r\nsys.argv[1]\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360573276","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-360573276","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":360573276,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-25T19:27:10Z","updated_at":"2018-02-05T07:03:07Z","author_association":"OWNER","body":"# Define a class 定义类\r\n\r\n```\r\nclass Person():\r\n    self.name = ''\r\n    self.id = 0\r\n    self.father = 1\r\n    self.mother = 2 \r\n\r\n    def __init__(self, name):\r\n        self.name = name\r\n\tself.born()\r\n    \r\n    def born(self):\r\n        self.id = self.father + self.mother\r\n\r\nme = Person('Solomon')\r\nprint me.id\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/360580633","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-360580633","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":360580633,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-01-25T19:52:10Z","updated_at":"2018-01-25T19:52:10Z","author_association":"OWNER","body":"# FLask 初接触\r\n> Flask是基于Python的Web后台服务器框架，相对于Django来讲属于非常灵巧的轻量级框架。目前市面上应用程度很广，值得学习一下。\r\n\r\n## Installation\r\n\r\n- Windows Git Bash\r\n\r\n```\r\npip install virtualenv\r\nmkdir /d/workspace/myFlask\r\ncd /d/workspace/myFlask\r\n\r\nvirtualenv --no-site-packages venv\r\nsource venv/Scripts/activate\r\n# Now is already in virtual enviroment\r\n\r\npip install Flask\r\n```\r\n\r\n- Windows CMD\r\n\r\n```\r\n# 其他都一样 只有运行不同\r\nvenv\\Scripts\\activate\r\n```\r\n\r\n## Deployment\r\n\r\n```\r\ntouch hello.py\r\nmkdir static\r\nmkdir templates\r\n```\r\n\r\n## Hello World\r\n\r\n在hello.py中输入以下内容并保存(最简单Flask)\r\n\r\n```\r\nfrom flask import Flask\r\napp = Flask(__name__)\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    return 'Hello World!'\r\n\r\n    if __name__ == '__main__':\r\n        app.run(debug=True)\r\n```\r\n\r\n## 运行\r\n\r\n```\r\npython hello.py\r\n```\r\n\r\n## 渲染模板\r\n\r\n在`template`文件夹中新建模板users.html，并随便写几句话，在hello.py中加入如下语句：\r\n\r\n```\r\n#记住在前面需要引用渲染函数\r\nfrom flask import render_template\r\n\r\n@app.route('/users/')\r\ndef show_users():\r\n    return render_template('users.html') \r\n```\r\n\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362521940","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-362521940","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":362521940,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-02T08:42:05Z","updated_at":"2018-02-20T19:14:56Z","author_association":"OWNER","body":"# python 获取当前路径\r\n> 看似是个小问题，但是在python里实际上是个非常容易被混淆的东西。\r\n\r\n[参考文章](https://stackoverflow.com/questions/4934806/how-can-i-find-scripts-directory-with-python)。\r\n\r\n需要`import os`和`import sys`\r\n- 当前工作区: `os.getcwd()`，注意，这不是脚本的位置，而是命令行中的工作区位置。\r\n比如当你在`~/A/`执行`~/B/`文件夹中的一个python代码，那么返回的是`~/A/`，因为命令行中的工作区在`~/A/`.\r\n- 当前文件名：`sys.argv[0]`或`__file__`，注意，两个变量都不稳定。__file__这个默认变量在一些环境下是没有被定义的，sys.argv[0]有时是完整路径有时只是一个文件名，所以，慎用。最好都配合os.path的各种方法运用。\r\n所以正确方法是：`os.path.basename(sys.argv[0])`\r\n- 当前文件完整路径：`os.path.realpath(sys.argv[0])`\r\n- 当前文件所在文件夹：`os.path.dirname(os.path.realpath(sys.argv[0]))`\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362527027","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-362527027","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":362527027,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-02T09:03:44Z","updated_at":"2018-02-12T13:16:43Z","author_association":"OWNER","body":"# python调用命令行\r\n参考[这篇文章](https://www.jianshu.com/p/5d999a668e79)\r\n\r\n```python\r\nimport os\r\n\r\n#只返回结果\r\nos.system(command)\r\n\r\n#返回结果与终端显示信息\r\nwith os.popen(command, mode) as f: \r\n    print f.read()\r\n\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/362997312","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-362997312","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":362997312,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-05T06:58:20Z","updated_at":"2018-02-16T09:09:00Z","author_association":"OWNER","body":"# Python代码之美\r\n> 有时特别想摘抄一些别人漂亮的代码书写。在这里贴上吧。\r\n\r\n### [`gh-issues-import.py`](https://github.com/IQAndreas/github-issues-import/blob/master/gh-issues-import.py)\r\n代码整齐和常量名全大写\r\n![image](https://user-images.githubusercontent.com/14041622/35791554-9d0f75d4-0a83-11e8-8110-cfd227a4f198.png)\r\n分隔有序，不用注释也可以清晰表面之间分别\r\n![image](https://user-images.githubusercontent.com/14041622/35791749-7734bc38-0a84-11e8-9143-5db51fa864c4.png)\r\n简单函数和复杂函数的断行方式\r\n![image](https://user-images.githubusercontent.com/14041622/35791839-dab7cb1a-0a84-11e8-9601-d6e18c8b6871.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363431600","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-363431600","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":363431600,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-06T14:05:09Z","updated_at":"2018-02-06T14:05:09Z","author_association":"OWNER","body":"# Python 读取JSON数据\r\n\r\n```python\r\nimport json\r\n\r\nhim = json.loads( '{\"title\": \"Jason\", \"content\": \"hello\"}' )\r\n\r\nprint( him['title'] )\r\n```\r\nOut:\r\n```\r\nJason\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363449743","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-363449743","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":363449743,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-06T15:04:40Z","updated_at":"2018-02-06T15:04:40Z","author_association":"OWNER","body":"# Python中文解决方案 （简易）\r\n翻了翻几年前研究Python中文编码的问题，原来如此复杂。。。。一时间全忘了。\r\n为了避开这个理论上的难题，我直接开启了实验出真知的模式，试验出一个简单的方法。\r\n简单来说如下：\r\n1. 首先页头要有`# -*- coding: utf-8 -*-`的声明\r\n2. 整个py文件中，只要任何一处设计字符串，都要认真处理\r\n3. 所有获得的字符串，都要先进行`\"字符串\".decode('utf-8)`解码为某种原始编码。\r\n4. 所有要发出的或写入文件的，都必须要进行`\"字符串\".encode('utf-8')`编码为统一码。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363699464","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-363699464","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":363699464,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T08:52:37Z","updated_at":"2018-05-10T09:10:23Z","author_association":"OWNER","body":"# 为什么要用IPython/Jupyter? \r\n> python里面调试确实有点烦恼，尤其是在vim里，想要尝试一些简单的编码问题，实在是有点麻烦，不想到命令行模式一行一行执行，也不想再新建一个文件测试一个简单的功能。\r\n\r\n而且就是不管这些，测试一个简单的功能如学习语法、测试编码、测试新学习的包等，在IDE里面测试，看不到每个部分的output效果（除非自己手动去命令行里复制或截屏），在命令行里测试，则没法轻松撤销前面的代码。。。。\r\n所以这时候才想到好像前阵子看到youtube视频里别人用IPython，是那种又能轻松编辑又能为每部分显示output效果，还能在旁做markdown笔记的东西。\r\n出于这个想法，搜到了这篇[知乎回答](https://www.zhihu.com/question/51467397)，看到了不少有意思的东西，感觉又展开了一个崭新的领域，python的视界豁然开朗。\r\n[这篇文章](https://zhuanlan.zhihu.com/p/33654849)极好的解释了IPython的入门用法，相当酷！我怎么竟然这么久都不知道这种东西的存在？\r\n\r\n### IPython和Jupyter的区别？\r\n据说一开始IPython是作为`IPython shell`的存在，后来Jupyter融合了它，又把自己和IPython上独立出来，做成了网页版的`Jupyter Notebook`这样的东西。Jupyter强大的特性，加上和各种数据研究库的紧密结合，真让人不能忽视它的存在了。\r\nIPython的安装方法，简单地`pip install ipython`即可。\r\n但是，想到IPython本身一个shell，让我想起了我自己用的shell是`zsh`，让我把zsh切换到别的shell里面去，还真有点不喜欢。。这可能是个stylish issue吧。\r\n所以，应该直接了当的安装jupyter，其中也会自动安装上`IPython shell`，作为其运行的Kernel。\r\n\r\n## 错误的安装Jupyter\r\n~只安装Jupyter本身的话，很简单：`python -m pip install jupyter`。不过根据官方文档，强烈建议安装Jupyter的`Anaconda`发行版，像大礼包一样的自动安装`python+Jupyter Notebook+一系列数据研究库`。因为本来就是要研究机器学习等一系列数据研究的，所以Anaconda正合适。这个我觉得再好不过了，所以直接跳到[`Anaconda`页面](https://www.anaconda.com/download)去看安装方法。然后看到，Anaconda安装方法是不能简单`apt-get`或`brew`或`pip install`的，500M左右的大小，需要下载后启动图形安装工具或shell脚本安装（`.sh`文件本身就500M，而且安装分为Python 3和Python 2的两种方式。~\r\n\r\n然后就会发现：**Anaconda谁装谁后悔！**\r\nAnaconda体积庞大，软件管理看起来一体化简单，实际上在处理一些Bug和自定义设置的情况下非常不好定位。我在Mac上初次安装Anaconda大礼包后，连简单的`jupyter notebooke`这样的命令都执行不了，详尽了办法最后才用直接指定路径的方式运行。这只是一开始，之后还有notebook里各种找不到外部安装的python package的情况。\r\n所以还是别图便宜，手动安装一步一步来吧。一键安装很多时候都没那么好。\r\n试了下手动安装的方法，`pip install jupyter`，或者官方的`python -m pip install jupyter`，都会发生`jupyter: command not found`找不到命令。参考了数十篇网络上中英文文章，都没有解决。常说的直接引用`~/.local/bin`这个位置的 jupyter也不行（没有）。\r\n终于，意识到这些方法都是错误的思路。\r\n\r\n## 正确的安装Jupyter Notebook\r\n不管官网怎么推荐Anaconda，网络上各种简单解说，总之Anaconda或`pip install jupyter`都很容易引发巨大的问题。由于jupyter的性质：它是调用python内核的东西，用系统python还是用自己的python，这都是很敏感很麻烦的问题。用系统的python很容易识别不到或者被别的程序修改导致bug，用自己的python会导致别的地方安装的package在jupyter里识别不了。\r\n所以：\r\n参考了[这篇的思路](https://zhuanlan.zhihu.com/p/27542582)，正确的方法是在virtualenv虚拟环境下，绝对安全封闭的环境下用`pip`安装jupyter。这样的话，第一，不需要`sudo pip`这样敏感的东西去安装jupyter这么复杂的工具；第二，也保证了jupyter不会搞乱其它东西。\r\n然后，二话不说，在已有virtualenv的情况下，在某个文件夹里建立虚拟环境，并启动虚拟环境。然后简单一句`pip install jupyter`，完成安装。\r\n安装完成后`jupyter notebook`，完美运行！\r\n```shell\r\n$ pip install jupyter\r\n\r\n# or for Python3\r\n$ pip3 install jupyter\r\n```\r\n这样的话，即使以后要在jupyter里各种安装插件、各种配置新kernel等，都不用害怕了，因为再怎么玩弄，也出不去这个圈。\r\n话说回来，实际上你也没什么需要在全系统配置jupyter的必要，在某个文件夹玩就足够足够的了。\r\n何必呢？\r\n\r\n## 启动Jupyter\r\n用命令行启动很简单，在某个工作目录，输入：\r\n```\r\n$ jupyter notebook\r\n```\r\n这样就能以这个目录打开一个`http://localhost:8889/tree`的网页，一切都在这个网页里操作。\r\n\r\n## 正确的启动Jupyter\r\n正确的方式，实际上是在Virtualenv虚拟环境下启动，可以随意安装各种包，适配各种Python版本环境：\r\n```shell\r\n# 启动Virtualenv\r\n$ source ~/PATH-TO-VENV/activate \r\n\r\n# 启动Jupyter\r\n(venv)$ jupyter notebook\r\n```\r\n\r\n### 终端里找不到`jupyter`命令\r\n总是报`command not found jupyter`错误，说没有这个命令。一开始还以为是zsh的问题，可是切换到bash也一样。\r\n照着网上攻略在`.zshrc`里改也没用，在`.bash_profile`里改也没用。\r\n然后发现，在Mac自带的Terminal.app中就可以正常打开，不需要改任何配置。\r\n这才知道原来是iTerm2无法识别。于是在Terminal.app中用`which`命令查看jupyter命令的所在处，看到它位于`/Users/我的用户名/anaconda2/bin/jupyter`这个地方。\r\n于是直接在`~/.zshrc`中加入alias：\r\n```shell\r\n$ alias jupyter=\"/Users/我的用户名/anaconda2/bin/jupyter\"\r\n```\r\n重启iTerm2，好用！\r\n\r\n但是，iTerm2中的bash还是不能访问，用同样的方法也不行。暂时没找到解决方法。\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363737263","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-363737263","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":363737263,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T11:13:23Z","updated_at":"2018-02-08T02:50:28Z","author_association":"OWNER","body":"# Python `requests`库抓取网页出现乱码\r\n> 练习抓取网页时遇到的，如果是简书等这些标准网站，正常抓取是没问题的。但是很多网页竟然怎么抓取都是所有中文都乱码。弄的我还以为是python代码本身的encoding问题。最后才追溯到原来是出现在源头requests库里面。\r\n\r\n参考这两篇文章，[requests官方文档](http://docs.python-requests.org/zh_CN/latest/user/quickstart.html)， 和，[代码分析Python requests库中文编码问题](http://xiaorui.cc/2016/02/19/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90python-requests%E5%BA%93%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/)，非常有参考性。\r\n\r\n第二篇文章中看到，很多网页实际上并不都是`utf-8`的编码格式，还有很多是`ISO-8859-1`格式，如下图：\r\n![image](https://user-images.githubusercontent.com/14041622/35913040-5fb39cc6-0c39-11e8-9cee-8dc8e7961918.png)\r\n但是，其实不是网页本身的问题！我们查看网页本身的`headers`发现，他们的`charset`值是`utf-8`，但是为什么用`r.encoding()`得到的却是`ISO-8859-1`呢？文章中指出原来是requests的bug，而且常年不解决。所以就需要我们自己来想办法。\r\n我们不能手动去检查每一个网页的编码啊，那样太麻烦了。\r\n官方文档中出现了这么一小句话，非常重要，亲测有效：\r\n![image](https://user-images.githubusercontent.com/14041622/35913251-0508ce9e-0c3a-11e8-8f76-188c026436ca.png)\r\n虽然这句话不是为了处理网页的，但是`二进制`！沿着这个思路，又在官网看怎么将网页获取为二进制模式的：\r\n![image](https://user-images.githubusercontent.com/14041622/35913331-3c097b96-0c3a-11e8-8bed-5a872e457116.png)\r\n就是使用`r.content`获取。\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/363828201","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-363828201","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":363828201,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-07T16:35:31Z","updated_at":"2018-02-08T07:03:26Z","author_association":"OWNER","body":"# 关于解决Python乱码问题的终极解决方案 (TL;DR)\r\n![image](https://user-images.githubusercontent.com/14041622/35929949-a242afbe-0c6b-11e8-8848-508c4e8124d1.png)\r\n\r\n> 有个特别好玩的现象，当我们为了python编码头疼的时候，几乎搜索到所有的文章都会先发一通牢骚。然后在无可奈何地写解决思路（是解决思路不是方案）。这个问题真不是新手问题，即使是十几年python老手也经常头疼。中国外国都一样。看看这个python专家在[PyCon大会上用半个多小时讲解乱码的视频](https://www.youtube.com/watch?time_continue=1040&v=sgHbC6udIqc)就了解了，他自己都给自己的来回encoding, decoding, encoding, decoding说晕了，台下举手他都拒绝回答，可想而知这个问题复杂性。\r\n\r\n我认为，几乎每个pythoner，都会有一段人生浪费在了编码上。可以说这个问题，是如果你不彻彻底底解决，就永远会崩溃的地步。翻看我曾经写的数篇文章就知道了：\r\n- [对Python 2.x的通宵抱怨](https://github.com/solomonxie/solomonxie.github.io/issues/9)\r\n- [Python中文字符的理解：str()、repr()、print ](https://github.com/solomonxie/solomonxie.github.io/issues/10)\r\n- [Python里中文编码的理解：unicode、utf-8、gbk](https://github.com/solomonxie/solomonxie.github.io/issues/20)\r\n\r\n牢骚结束，下面是我又一次用了两个整天才测试整理书写完成的ipython notebook笔记。`ipynb`格式的笔记源文件在这里，当然有可能会链接失效，有喜欢ipython的live coding笔记的且想要用这个笔记测试编码的，请联系我。\r\n\r\n### 首先，需要先要了解python的`print大法`\r\n如果python的print的特性都没有了解的话，希望你不要贸然尝试用print去调试测试乱码编码的问题。\r\n这里的print厉害到让你不高兴的地步——它不管你塞过来的是什么格式什么编码，字符串数组对象什么的的都一口气全打印出来。\r\n感觉好像很好，但其实是我们仔细研究编码问题的最大阻碍。\r\n因为你塞给print一个unicode它能打出中文，塞一个utf-8或iso8895给它，也一样给你打印出原文。这样以来，你看着它出现原文后，就欣喜若狂产生了一种胜利的错觉。\r\n所以我想在这里最先说清楚它：\r\n#### 不要轻易在研究乱码的时候用print测试目标！\r\n也不是说这种时候一点都不能用，而是说你可以print别的什么东西，但是如果想看清某个变量本质的话，千万不要用。\r\n这个时候要用`print repr(字符串)` ,或者最好是在命令行或ipython里面测试，像这样：\r\n![image](https://user-images.githubusercontent.com/14041622/35959122-2d49108a-0cdf-11e8-8a92-66872afc4782.png)\r\n\r\n看出区别了吗？明确了这点，再来继续研究编码问题。\r\n\r\n### 简单来说，先要记住，在Python2里字符串只有两大阵营：\r\n\r\n## `unicode`和`str`\r\n\r\n如果`type(字符串)`显示结果是`str`，其实指的是`bytes`字节码。\r\n而其它各种我们所说的`utf-8`，`gb2312`等等也都是Unicode的不同实现方式。\r\n这里不要去考虑那么复杂，只要先记住这两大阵营就行。\r\n\r\n## `encoding`和`decoding`\r\n\r\n绝对要记住的：\r\n从`unicode`转换到`str`，这个叫`encoding`，编码。\r\n从`str`转换到`unicode`，这个叫`decoding`，解码。\r\n![image](https://user-images.githubusercontent.com/14041622/35937299-c7e99858-0c80-11e8-8c0d-aedfb723a2c1.png)\r\n(图片引用自知乎相关某答案。)\r\n\r\n来回记住这个问题，才能进入下一步！\r\n\r\n然后来看个案例。\r\n![image](https://user-images.githubusercontent.com/14041622/35928287-ca30e972-0c67-11e8-96d1-7d3a05e26e43.png)\r\n\r\n> 通过上面两种格式的对比我们看到，str和unicode的各种区别。\r\n\r\n那么，既然变量里面会出现两种不同的格式，如果我们把两种格式的字符串连在一起操作会发生什么呢？\r\n如下：\r\n![image](https://user-images.githubusercontent.com/14041622/35928324-dddbf200-0c67-11e8-96db-31061e6848eb.png)\r\n\r\n### 看！著名的编码错误`UnicodeDecodeError: 'ascii' codec can't decode`就这样出现了！\r\n\r\n以上是我们用`显性`字符串来比较两种格式字符串的区别。\r\n\r\n但是，我们经常性处理python编码问题，都不是在这种`显性`的字符串上出现的，不是从网上爬取的就是从本地文件读取的，意思就是文件内容庞大，编码格式很难猜到是什么。\r\n所以这里我们将问题再拆分为两部分讨论：本地文件和网络资源。\r\n\r\n## 本地文件编码测试\r\n首先在本地建立一个有中文的以`utf-8`格式保存的文本文件（实际上无论.txt还是.md等都无所谓，内容是一样的）。\r\n内容只有'你好'。\r\n\r\n### 然后我们来读取一下：\r\n![image](https://user-images.githubusercontent.com/14041622/35928363-f0ffdb44-0c67-11e8-9b37-1cf8ebcb5ec0.png)\r\n\r\n> 上面看到，从文件读取出来的，就是str格式的字符串。\r\n那么如果要把str转化为unicode，就要解码，也就是decoding.\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35928391-017b7d0c-0c68-11e8-8a73-eed6d071fc56.png)\r\n\r\n### 这种时候实际上是最迷糊也最容易造成之后错误的，就是分不清该编码还是该解码。\r\n\r\n> 所以上面提到，必须要记住这两个区别。\r\n那么如果现在我搞反了怎么办？就会再次出现下面错误：\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35928408-10b50180-0c68-11e8-8a41-9d4d97a3be66.png)\r\n\r\n### 话说回来，我们该怎么统一他们呢？\r\n> 为了避免两种格式的字符串在一起乱搞，统一他们是必须的。但是以哪一种为统一的呢，unicode还是bytes?\r\n\r\n网上各种文章统一口径，要求代码中出现所有的变量都统一为unicode。\r\n可是我在实践和测试中都越来越发现：这种做法真的不那么可靠，甚至我怀疑有可能我们碰到那么多的问题，都是由它搅乱引起的。\r\n\r\n#### 下面我们来看看做常用的环境下字符串都是什么格式\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35928691-b8c8ea1c-0c68-11e8-952d-97c8c205ae79.png)\r\n\r\n> 这样就明白了：除了r.text返回的内容外，其它几乎都是使用str格式，也就是bytes字节码码。所以我们只要转化requests相关的内容就行！\r\n\r\n实际上，requests返回的response中, 除了用`.text`获取内容，我们还可以用`.content`获取同样的内容，只不过是bytes格式。\r\n\r\n那就正和我们意，不用再去转化每一个地方的字符串，而只要盯紧这一个地方就足够了。\r\n\r\n### 为什么我们不能把所有字符串变量统一为unicode呢？\r\n\r\n先提醒下，变成unicode的过程，叫`decoding`。不要记错。\r\n像`.text`经常把`ISO8859`等猜不到也检测不到编码(机率很低)的字符串扔过来，如果遇到的话，是很麻烦的。\r\n`decoding`有两种方法：\r\n```\r\nunicode(b'你好‘）\r\nb'你好'.decode('utf-8')\r\n```\r\n\r\n这里因为不知道来源的编码，所以必须用`unicode()`来解码，而不能用`.decode('utf-8')`，因为显然你不能乱写解码名称，如果来源果真是（很大几率是）`ISO8859`等方式，那么错误的解码肯定会产生乱码，或者直接程序报错。切记！\r\n\r\n所以这里只能用`unicode()`解码。如下例：\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35928475-387899f2-0c68-11e8-9821-3f31939c7742.png)\r\n\r\n##  结论：一定记住，全文都统一用`str`格式字符串\r\n### 只要盯紧requests、json等这种经常处理外来资源的库就好了。\r\n只要控制好外来源的字符串，统一为`str`，其它一切都好说！\r\n\r\n> 实际上，我发现遇到的绝大多数编码问题，实际上不是python原生方法导致的，而是这些外来库所引起的！因为每个模块都会有自己的一套处理编码的方式，你还真不知道它是采用哪个。就像JSON的dumps()一样埋着大坑等着我们。所以真正应该盯紧的就是这些库了。\r\n\r\n\r\n下面是一个从获取网络资源（含中文且被requests认为编码是ISO8850的网页）到本地操作且存储到本地文件的完整测试。\r\n```python\r\nimport requests\r\n\r\nr = requests.get('http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue5/unipain.html')\r\n\r\n# write a webpage to local file\r\nwith open('test.html', 'w') as f:\r\n    f.write( r.content )\r\n\r\n# read from a local html file\r\nwith open('test.html', 'r') as f:\r\n    ss = f.read()\r\n```\r\n大功告成！效果如下：\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35929410-69cf7e42-0c6a-11e8-915d-f020a729bbb4.png)\r\n\r\n### 再也不用纠结、检查每一个变量、写一大堆嵌套转化方法了！注意，只要盯紧各种外来模块和库的文字处理就够了。\r\n\r\n> 另外，关于JSON的乱码问题，又是一个新的较长篇章。我会单分一篇，请到我的专栏里找。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364014435","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364014435","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364014435,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T06:21:46Z","updated_at":"2018-02-08T06:22:51Z","author_association":"OWNER","body":"# Python操作JSON出现乱码的解决方案\r\n> 其实刚刚写过一整篇Python编码问题的解决方案，由于JSON又是一种特殊案例（与库相关，与语言本身无关）所以就单独提出来说。\r\n\r\n\r\n## 我们来看一个从网上获取json并又存到本地文件的例子\r\n```python\r\nimport requests,json\r\n\r\nr = requests.get('https://api.github.com/repos/solomonxie/\\\r\nsolomonxie.github.io/issues/25/comments')\r\n\r\n# 获取到我的github中某条issue的所有评论，形式为<JSON格式的字符串>\r\ncomments = json.loads( r.content )\r\n\r\n# 取某一条评论查看内容（中文）\r\ncc = comments[0]['body'][0:10] # 取出的内容是'## 配置：先从配置'\r\n```\r\n然后来测试下变量cc：\r\n![image](https://user-images.githubusercontent.com/14041622/35958210-88aad5ee-0cda-11e8-8192-08a8da696a31.png)\r\n\r\n### 好，到这里先停一下！\r\nJSON的读取到目前为止，都是正常的：JSON Object对象给出的值都是unicode，没有被莫名转义，也没有报错误。\r\n> 但是，unicode格式，意味着它和str格式不兼容！\r\n这时，害羞的大姑娘Unicode刚出炉，你不能在这个时候让它和Str操作在一起！\r\n报错也往往就在这种疏于防备的时候！\r\n\r\n比如你看：\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35958360-59681c8c-0cdb-11e8-9a83-c825e4a9eb8b.png)\r\n\r\n上面打印了三条Unicode和Str的结合，\r\n前两条分别是以Str格式的结合，以Unicode格式的结合。\r\n但是第三条，把两个不同格式的字符串结合，就出错了。\r\n\r\n对不起，这里不是Javascript，变量不可以任意交合。Python对变量和编码都是极其谨慎的。\r\n\r\n所以明白了这点，我们再继续。\r\n\r\n### 上面获得了JSON Object对象，那么再来试试将`JSON对象`整体存到文本文件中。\r\n如果要存到本地文件，那么就必须把Object对象转换为Str格式的字符串。\r\njson库自带.dumps()函数可以进行转化。\r\n但是这里问题出现了！我们来小试一下：\r\n![image](https://user-images.githubusercontent.com/14041622/35958250-b7b04900-0cda-11e8-860b-bc1494274be5.png)\r\n> 竟然连`print大法`都不能把`json.dumps()`返回的内容正确打印出来。经过各种测试和查看官网对于此函数的文档，发现：\r\n\r\n### 原来`json.dumps()`是默认所有非ascii码强制转化为代号（而非汉字）的，于`repr()`效果等同！\r\n[官方文档](https://docs.python.org/2/library/json.html#encoders-and-decoders)里有说明，`json.dumps()`里面有个`ensure_ascii`参数，默认为True。\r\n意思就是默认把所有非ascii字码用`\\`强制转化。所以，为了关闭这个功能，我们必须把它设为`False`.\r\n下面是个小测试：\r\n![image](https://user-images.githubusercontent.com/14041622/35958259-c42808e4-0cda-11e8-87ca-dc16e0816567.png)\r\n\r\n### 这样一来JSON在Python里的编码问题就解决了：须用`json.dumps(obj,  ensure_ascii=False)`来转化为字符串\r\n\r\n下面是完整的代码测试：\r\n```python\r\n# @网络资源到本地存储真实测试\r\nimport requests,json\r\n\r\nr = requests.get('https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/25/comments')\r\n\r\n# 获取到我的github中某条issue的所有评论，形式为<JSON格式的字符串>\r\ncomments = json.loads( r.content )\r\n\r\noutgoing = json.dumps( comments, ensure_ascii=False )\r\n\r\nwith open('test.txt', 'w') as f:\r\n    f.write(outgoing.encode('utf-8'))\r\nwith open('test.txt', 'r') as f:\r\n    read = f.read()\r\n    \r\nprint read[0:20], type(read)\r\n```\r\n来看结果：\r\n![image](https://user-images.githubusercontent.com/14041622/35958296-f90e1260-0cda-11e8-8aed-2a320a9ac6f1.png)\r\n\r\n## 大功告成！"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364050902","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364050902","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364050902,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T09:22:04Z","updated_at":"2018-03-01T06:38:39Z","author_association":"OWNER","body":"# 更多Python编码的小细节\r\n\r\n## 数组`.join()`合并\r\n数组中必须所有的元素都是字符串，且都是统一的编码才能合并，否则报错。统一后，如果全是unicode，那么返回的字符串就是unicode；如果元素全是str，那么返回的就是str。\r\n![image](https://user-images.githubusercontent.com/14041622/35965010-6c01a23c-0cf4-11e8-81ce-9340217d9553.png)\r\n\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364093665","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364093665","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364093665,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T12:12:22Z","updated_at":"2018-03-02T18:15:27Z","author_association":"OWNER","body":"# python将某个目录打包为`zip`文件\r\n比较古老的方法是用`zipfile`库创建zip包，但是要写各种循环迭代需要很多行代码。\r\n还有另一种[python自带库`shutil`](http://python.usyiyi.cn/translate/python_278/library/shutil.html),可以一句话打包为zip文件。\r\n```\r\nimport shutil\r\nshutil.make_archive(base_name, format, root_dir, base_dir)\r\n```\r\n很快就打包好了！\r\n唯一注意的是，怎样把它安装自己想象的结构打包。\r\n- base_name，是加上完整路径（不能缩写）的文件或文件夹名\r\n- format一般是zip，其它tar之类也行\r\n- root_dir是要压缩的目录或文件\r\n- base_dir是压缩包里的文件层级。如你写`a/b/c`，这样所有文件都会塞到最底层的c文件夹中。\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364098319","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364098319","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364098319,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T12:33:54Z","updated_at":"2018-03-01T05:43:51Z","author_association":"OWNER","body":"# Python 日期和时间\r\n```\r\nfrom datetime import date\r\nprint str( date.today() )\r\n```\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364218628","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364218628","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364218628,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T19:17:15Z","updated_at":"2018-03-01T05:38:20Z","author_association":"OWNER","body":"# Python调试工具`pdb` —— Python Debuger\r\n[参考文章1](https://zhuanlan.zhihu.com/p/25942045)，[参考文章2](https://docs.python.org/2/library/pdb.html)\r\n\r\n- 启动方法一：`python -m pdb PATH-TO-SCRIPT.py`\r\n- 启动方法二：代码中写入`import pdb;pdb.set_trace()`，即插入了一个断点。\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35992333-f5e0e544-0d44-11e8-868c-3722bbb24903.png)\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/35991850-77a2bb90-0d43-11e8-9aad-a46cb9869136.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364229177","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364229177","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364229177,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-08T19:55:15Z","updated_at":"2018-02-19T08:26:38Z","author_association":"OWNER","body":"# 用requests报错`requests.exceptions.SSLError`\r\n![image](https://user-images.githubusercontent.com/14041622/35994940-df8d7214-0d4c-11e8-95fa-b4824ddde4d8.png)\r\n明明没有改代码，突然就报这种错误。\r\n调查发现，原来是被服务器拒了。可能是今天来回调试，多次访问同一个地址，就被屏蔽了。\r\n但是，同样是没有设置请求Headers的客户端postman和insomnia就还能正常访问，不知道为什么。\r\n后来知道了，原来是服务器拒绝给我传送数据，因为访问量太大了！\r\nGithub的API是比较好的，它会在response中返回一个当前访问剩余量和下次能再次开始访问的时间。所以搞明白这个就知道，不是自己代码的事，而是访问量的事了。解决方法就是request访问时加上auth认证，这样就会从默认的每小时60次访问增加到每小时5000次。基本上够用了。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364545126","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364545126","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364545126,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-09T19:53:47Z","updated_at":"2018-02-13T10:59:15Z","author_association":"OWNER","body":"# Python操作Git库 `GitPython`\r\n[参考文章](http://note.qidong.name/2018/01/gitpython/)\r\n[参考文章](http://www.cnblogs.com/baiyangcao/p/gitpython.html)\r\n[复杂点的参考](https://my.oschina.net/hopeMan/blog/141221)\r\n\r\n试了一圈发现，git库的用法设置非常符合原生git命令，只不过之间加了个`.`而已。\r\n比如原本命令行里是`git add .`，这里就是`repo.git.add('.')`，\r\n原本是`git commit -m \"信息\"`，这里就是`repo.git.commit(m='信息')`\r\n可以说减少了很多学习时间，基本上我很多都是没参考文档自己猜出来的也能用。\r\n\r\n```\r\nsudo pip install gitpython\r\n```\r\n库安装好后可以直接在python中用了。\r\n\r\n### 创建、识别、克隆仓库\r\n文件夹地址可以是全路径，也可以是`.`当前文件夹、`../`上级文件夹等用法。\r\n```\r\n# 在文件夹里新建一个仓库，如果已存在git仓库也不报错不覆盖没问题\r\nrepo = git.Repo.init(path='文件夹地址')\r\n\r\n# 选择已有仓库\r\nrepo = git.Repo( '仓库地址' )\r\n\r\n# 克隆仓库\r\nrepo = git.Repo.clone_from(url='git@github.com:USER/REPO.git', to_path='../new')\r\n```\r\n### 常用语句：\r\n```python\r\n# 查看repo状态\r\nprint repo.git.status()   # 返回通常的status几句信息\r\nprint repo.is_dirty()    # 返回是否有改动（包括未add和未commit的）\r\n\r\n# 添加文件 可以是单个文件名，也可以是`[ ]`数组，还可以是`.`代表全部\r\nprint repo.git.add( '文件名' )\r\n\r\n# commit提交\r\nprint repo.git.commit( m='提交信息' )\r\n```\r\n\r\n### 远程交互操作\r\n```python\r\n# 创建remote：\r\nremote = repo.create_remote(name='gitlab', url='git@gitlab.com:USER/REPO.git')\r\n\r\n# 远程交互：\r\nremote = repo.remote()\r\nremote.fetch()\r\nremote.pull()\r\nremote.push()\r\n```\r\n\r\n### 实验效果\r\n```python\r\n # 原意是返回工作区是否改变的状态\r\n# 但是测试发现，工作区有变动它返回False，没变动却返回True\r\nprint repo.is_dirty()\r\n```\r\n\r\n### 生成tar压缩包\r\n```python\r\n# 压缩到 tar 文件\r\nwith open('repo.tar', 'wb') as fp:\r\n    repo.archive(fp)\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364548873","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364548873","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364548873,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-09T20:05:19Z","updated_at":"2018-05-09T10:39:46Z","author_association":"OWNER","body":"# `pip 常用操作`\r\n注意：\r\n- 安装过程中尽管很多包需要sudo权限，但是，尽量不要sudo！最好的是在virtualenv下操作\r\n- 一些常见问题，升级pip到10.0就解决了\r\n\r\n```shell\r\n## 安装包\r\npip install <package name>\r\n\r\n## 删除包\r\npip uninstall <package name>\r\n\r\n## 升级某个包\r\npip install --upgrade <package name>\r\n\r\n## 安装某个版本的包\r\npip install django==1.9\r\n\r\n## 升级自己\r\npip install --upgrade pip\r\n\r\n## 显示模块包的安装路径\r\npip show <package name>\r\n\r\n## 查看已经过期的软件（不是最新版）\r\npip list --outdated\r\n\r\n## 列出已安装的包 (二者皆可)\r\npip list\r\npip freeze\r\n\r\n## 导出已安装包到requirements.txt\r\npip freeze > requirements.txt\r\n\r\n## 批量安装包\r\npip install -r requirements.txt\r\n\r\n## 搜索包\r\npip search\r\n\r\n## 查询可升级的包\r\npip list -o\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364680780","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364680780","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364680780,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T19:00:09Z","updated_at":"2018-02-10T19:25:45Z","author_association":"OWNER","body":"# Python 删除某文件夹\r\n[参考文章](https://askubuntu.com/questions/555318/delete-all-files-except-files-with-the-extension-pdf-in-a-directory/555326)\r\n- os.remove() will remove a file\r\n- os.rmdir() will remove an empty directory\r\n- [shutil.rmtree()](https://docs.python.org/3/library/shutil.html#shutil.rmtree) will delete a directory and all its contents\r\n\r\n```python\r\n# 删除某个目录及里面所有内容，第二个参数为True时忽略所有错误中断\r\nshutil.rmtree('<path>', True)\r\n```\r\n\r\n\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364909427","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364909427","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364909427,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-12T12:30:59Z","updated_at":"2018-02-14T14:04:45Z","author_association":"OWNER","body":"# Python 异常捕获\r\n常用配置是这样的：\r\n```\r\ntry:\r\n    do_something()\r\nexcept BaseException as e:\r\n    print 'Failed to do something: ' + str(e)\r\n```\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364912304","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364912304","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364912304,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-12T12:44:26Z","updated_at":"2018-02-12T12:44:26Z","author_association":"OWNER","body":"# Python 睡眠\r\n[参考文章](https://www.pythoncentral.io/pythons-time-sleep-pause-wait-sleep-stop-your-code/)\r\n\r\n```python\r\nimport time\r\n \r\n# Wait for 5 seconds\r\ntime.sleep(5)\r\n \r\n# Wait for 300 milliseconds\r\n# .3 can also be used\r\ntime.sleep(.300)\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/364922506","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-364922506","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":364922506,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-12T13:29:53Z","updated_at":"2018-02-12T13:29:53Z","author_association":"OWNER","body":"# Jupyter Notebook IPython无法识别Module问题\r\n因为Jupyter notebook的python不是系统里的python， 而是运行在`/Users/solomonxie/anaconda2/bin/python`这里的。同时还有其他很多位置、kernel等等问题非常复杂，网上目前还很难找到比较简单的解决方案。\r\n唯一看到的是[这篇文章](https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/)，讲到很不一样的思路，即用conda还是pip来安装module的分别。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365180719","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-365180719","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":365180719,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T08:04:43Z","updated_at":"2018-02-13T08:10:28Z","author_association":"OWNER","body":"# Python集合的操作\r\n> 有时候在对比两个数组，如果运用上集合的话就会相当精妙。\r\n\r\n### 基本操作\r\n[参考文章](http://blog.csdn.net/business122/article/details/7541486)\r\n```python\r\ns = set([3,5,9,10])\r\nt = set([1,2,3,4,5,6,7,8,9,10])\r\n\r\n# 基本运算\r\na = t | s          # t 和 s的并集  \r\nb = t & s          # t 和 s的交集  \r\nc = t – s          # 求差集（项在t中，但不在s中）  \r\nd = t ^ s          # 对称差集（项在t或s中，但不会同时出现在二者中） \r\n\r\n# 基本操作：  \r\nt.add('x')            # 添加一项  \r\ns.update([10,37,42])  # 添加多项  \r\nt.remove('H')     #删除一项\r\n```\r\n以下来自[官方参考](https://docs.python.org/2/library/sets.html)：\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/36139421-626ac50e-10d8-11e8-8f40-eb63c095956e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/36139390-467c0b3c-10d8-11e8-95e4-072b164ac9c3.png)\r\n"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/365617410","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-365617410","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":365617410,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-14T14:08:08Z","updated_at":"2018-02-19T15:28:34Z","author_association":"OWNER","body":"# python 日志记录学习\r\n> 简单脚本还好，print足够。但是稍微复杂点，哪怕是三四个文件加起来两三百行代码，调试也开始变复杂起来了。再加上如果是后台长期运行的那种脚本，运行信息的调查更是复杂起来。一开始我还在各种查`crontab`的日志查看，或者是`python后台运行查看`，或者是`python stdout的获取`等等，全都找错了方向。真正的解决方案在于正确的logging。记录好了的话，我不需要去找python的控制台输出`stdout`，也不需要找`crontab`的日志，只需要查看log文件即可。下面是python的logging学习记录。\r\n\r\n### ~最简单的日志输出（无文件记录）~\r\n```python\r\nimport logging\r\n \r\nlogging.error(\"出现了错误\")\r\nlogging.info(\"打印信息\")\r\nlogging.warning(\"警告信息\")\r\n```\r\n\r\n> 更新：`Python Logging`原来真的远比我想象的要复杂很多很多，学习路线堪比git。但是又绕不过去，alternatives又少，所以必须要予以重视，踏踏实实认认真真的来好好学学才行。\r\n\r\n## 首先，忘记`logging.info()`! 忘记`logging.basicConfig()`!\r\n网上各种关于python logging的文章实在是太不体谅新手了，logging这么复杂的东西竟然想表现得很简单，还用各种简单的东西做假象。\r\n实际上我们真正要用起来的日志，绝对是不会直接用`logging.info()`和`logging.basicConfig()`这样的，这是此模块的官方推出来迷惑人的——看似让你一键上手，快速看到结果，但是跟实际真的不搭！\r\n所以为了后面解释起来轻松，必须先警告这点：忘记它们俩！\r\n记住，唯一要用到`logging.`什么的，就只有`logging.getLogger()`这一次。\r\n\r\n## 了解logging的工作流\r\n不想上流程图一类的东西，反而更迷糊。简单说吧：\r\n`logging`模块是会自动将你自定制的logger对象`全局化`的，也就是说，你在自己的模块里只要定义了一次某个logger，比如叫`log`，那么只要是在同一个模块中运行的其他文件都能读取到它。\r\n比如说你在主文件`main.py`中自定义了一个logger，可能设置了什么输出文件、输出格式什么的，然后你在`main.py`中会引用一些别的文件或模块，比如`sub.py`，那么在这个`sub.py`中你什么都不用设置，只要用一句`logger = logging.getLogger('之前在main.py定义的日志名')`即可获得之前的一切自定义设置。\r\n\r\n当然，被调用的文件（先称为子模块）中，用`logging.getLogger('日志名')`时，最好在日志名后加一个`.子名称`这样的，比如`main.sub`。这样输出的时候就会显示出来某条日志记录是来自于这个文件里了。当然，`.`前面的父级logger必须名字一致，是会被识别出来的！\r\n然后，子日志还可以再子日志，甚至一个子模块可以再让所有函数各又一个子子日志，比如`main.sub.func1`这样的。logging都会根据`.`识别出来上下级关系的。\r\n\r\n这样一说，实际上也就是class类继承的那种机制了。你按照父级名称继承，然后还可以改写自己的新设置等。\r\n\r\n了解了这些概念以后，才能来谈代码。实际上也就好理解多了。\r\n\r\n## 设置logger的方法\r\n看来看去，这篇文章说得比较全面也最清楚，以下很多都参考到它的内容：[Python 101: An Intro to logging](https://www.blog.pythonlibrary.org/2012/08/02/python-101-an-intro-to-logging/)\r\n\r\n一般想要自定义一个logger，比如让它输出信息时按照什么格式显示，输出到哪个文件，要不要输出到屏幕一类，有三种方法可以达到设置：\r\n- 直接在python代码里设置\r\n- 用外部的config.ini文件配置\r\n- 用python的dict字典配置\r\n\r\n三种达到的目的都是一样的，字典用的人很少也不方便，配置文件比较好用只是`.ini`的语法不是很方便读，且不容易做到变量的动态设置，所以一般直接在python代码里写就好。\r\n\r\n## 常用设置语句\r\n\r\n以下是程序主入口文件的通用写法，注意，一定要在主入口定义好logger，这样其他所有的子模块才能够继承到。\r\n```python\r\n#   main.py\r\nimport logging\r\nimport otherMod2   # 等下会调用到的子模块\r\n\r\ndef main():\r\n    \"\"\"\r\n    这个文件是程序的主入口\r\n    \"\"\"\r\n\r\n    define_logger()\r\n\r\n    log = logging.getLogger('exampleApp')\r\n\r\n    # 输出信息测试\r\n    logger.info(\"Program started\")\r\n    result = otherMod2.add(7, 8)     # 这个是来自别的模块的方法\r\n    logger.info(\"Done!\")\r\n\r\ndef define_logger():\r\n    logger = logging.getLogger(\"exampleApp\")\r\n    logger.setLevel(logging.INFO)\r\n\r\n    # 设置输出格式\r\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\r\n \r\n    # 设置日志文件处理器\r\n    fh = logging.FileHandler(\"new_snake.log\")\r\n    fh.setFormatter(formatter)    # 为这个处理器添加格式\r\n\r\n    # 设置屏幕stdout输出处理器\r\n    sh  = logging.StreamHandler(stream=None)\r\n    sh.setFormatter(formatter)\r\n \r\n    # 把处理器加到logger上\r\n    logger.addHandler(fh)\r\n    logger.addHandler(sh)\r\n \r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n下面是子模块中的调用方法（很简单）：\r\n```python\r\n# otherMod2.py\r\nimport logging\r\n \r\nmodule_logger = logging.getLogger(\"exampleApp.otherMod2\")\r\n\r\ndef add(x, y):\r\n    # 这里一句`getLogger`就继承到父级的logger了\r\n    logger = logging.getLogger(\"exampleApp.otherMod2.add\")\r\n\r\n    # 输出测试\r\n    logger.info(\"added %s and %s to get %s\" % (x, y, x+y))\r\n    return x+y\r\n```\r\n\r\n注意，`主文件`中，在什么地方定义logger都可以，可以在`main()`里也可以在任何单独的函数或类里，无所谓。只要在调用子模块之前定义好了就可以了。一旦定义过，`日志名`就会被记下来，然后子模块就可以轻松继承到。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366183493","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-366183493","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":366183493,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T09:22:42Z","updated_at":"2018-02-19T15:36:26Z","author_association":"OWNER","body":"# 定期执行Python脚本\r\n目前知道的有两种方法：python自带的`time.sleep()`定时器循环执行某段代码 和 linux系统的`crontab`命令定期执行某个脚本\r\n\r\n\r\n- `time.sleep()`方法，这个方法是执行脚本一次，然后内在代码在`while`循环中定期迭代。这种的问题在于，一旦将程序切换到后台，或者部署在服务器上断开ssh连接时，脚本就停止了。\r\n- `crontab`方法，是定期执行整个脚本。这个能够满足一般要求，唯一问题是它不会输出任何脚本的stdout，而是默默的执行。所以要想做这个，又能看到进程，需要用比较复杂的方法来配合执行。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366312718","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-366312718","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":366312718,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T18:05:52Z","updated_at":"2018-02-19T15:23:51Z","author_association":"OWNER","body":"# Python执行脚本将输出重定向时编码错误\r\n> 原本以为python内部的编码问题解决了，但是用linux命令将标准输出重定向时没想到又遇到了亲切的编码问题。\r\n\r\n![image](https://user-images.githubusercontent.com/14041622/36322055-f02f0200-1386-11e8-8071-d394cca60f68.png)\r\n\r\n根据[文章](http://www.708luo.com/posts/2014/06/python-print-encode-error/) 和 [文章](https://mozillazg.com/2014/01/python-fix-shell-python-program-redirect-to-file-raise-unicodedecodeerror)的解释，是因为linux的重定向命令并不知道python文件的输出编码而默认使用了ascii，所以当输出有超出128的字都会报错。\r\n解决方法很简单：\r\n\r\n在执行python的命令前加上`env PYTHONIOENCODING=utf-8`，如：\r\n```shell\r\nenv PYTHONIOENCODING=utf-8 python ~/hello.py >> log.txt\r\n```\r\n\r\n还可以分开写：\r\n```\r\n$ export PYTHONIOENCODING=utf8\r\n$ python hello.py  > hello.txt\r\n```\r\n\r\n这里还有一些相关的[stackoverflow回答](https://stackoverflow.com/questions/3828723/why-should-we-not-use-sys-setdefaultencodingutf-8-in-a-py-script)。\r\n\r\n## 这还是不能输出所有内容\r\n因为linux输出重定向的道理（在刚刚写的Linux学习的篇章里有专门说明），光是编码还不行，会发现还有很多内容并没有转向到文件里，而还是显示在屏幕上了。\r\n其实我们上面写的转向语句，只是把显示在屏幕上的`stdout`标准输出转向了日志文件，可是还有`stderr`标准错误没有转向到日志文件，所以才显示到了显示屏里。\r\n虽然看上去很多内容看起来并不是错误，比如`git push`的正常返回，好像和`stderr`标准错误没什么关系，可是它们本质上是通过`stderr`输出到屏幕的，只是我们不知道而已。\r\n所以这时候，\r\n应该把标准错误合流到标准输出里，一起转向。\r\n在命令的结尾加上`2>&1`，让2转向1，意思就是让标准错误转向至标准输出。其中`>`代表`Redirect to`，`&`没意义只是用来告诉系统后面的1是代表输出设置，而不是文件名。\r\n\r\n用上面的例子，这里应该这样写：\r\n```shell\r\nenv PYTHONIOENCODING=utf-8 python ~/hello.py >> log.txt 2>&1\r\n```\r\n\r\n然后，哒哒！屏幕上不会显示任何内容了！也就是说所有的东西都转向了log.txt文件里保存。"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/366990544","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-366990544","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":366990544,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-20T14:17:13Z","updated_at":"2018-02-21T11:10:27Z","author_association":"OWNER","body":"# Python clipboard/pasteboard image 处理剪切板图像问题\r\n目前python对剪切板的原生支持几乎是没有，必须下载第三发模块。\r\n目前比较流行的是跨平台最好的`pyperclip`和比较强大的`gtk`。\r\n但是pyperclip虽然简单易用，但是只支持文字，不支持图片等。\r\ngtk支持剪切板中的图像，但是代码较复杂，因为它原本是为了做桌面程序的库。\r\n\r\n再深入调查，python专门处理的图像的`PIL`库以及其升华版`Pillow`库，也并不能完好支持剪切板图像的读取。Pillow只能支持windows平台上的剪切板图像读取。\r\n\r\n看到这么麻烦，我试图转换思路：\r\n看看能不能用外部程序如命令行等先把剪切板图片保存为本地图片然后再让python来处理。\r\n但是，linux和mac都原生对剪切板图像的支持也不是很好，即使是第三方应用xclip、xsel等建立在x window基础上的应用也很难做到这个简单的东西。\r\n目前在Mac平台上比较好用的相关命令行应用，只有`pngpaste`。方便好用，只是不支持gif和在文件上直接复制来的数据。\r\n\r\n还是不够满意，于是再深度搜索和阅读大量的文章、大量的尝试，最后得到Mac上处理剪切板图像的python方案：`PyObjC`库。\r\n`Pyobjc`库是用python实现与Mac电脑基层api连接操作的库，在操作Mac OS底层问题上十分强大。\r\n`pyobjc`中有一个AppKit模块，而Appkit模块中有一个NSPasteboard类，有非常全面的支持剪切板操作的方法支持。\r\n我的Mac系统是Sierra，10.12，在以前安装过xcode的基础上，直接用`pip install pyobjc`即可完成整个库的安装，非常简单。注意：为了怕库太复杂影响系统其他程序操作，所以我打开virtualenv环境，安装在项目里而不是系统里。\r\n安装好后就可以直接在python里面编码了。以下代码改编自[这篇简书文章](https://www.jianshu.com/p/7bd4e6ed99be)：\r\n```python\r\n# pasteboard.py\r\n\r\nimport os\r\nimport time\r\n\r\n# 从PyObjC库的AppKit模块引用NSPasteboard主类，和PNG、TIFF的格式类\r\nfrom AppKit import NSPasteboard, NSPasteboardTypePNG, NSPasteboardTypeTIFF\r\n\r\ndef get_paste_img_file():\r\n    \"\"\"\r\n    将剪切板数据保存到本地文件并返回文件路径\r\n    \"\"\"\r\n    pb = NSPasteboard.generalPasteboard()  # 获取当前系统剪切板数据\r\n    data_type = pb.types()  # 获取剪切板数据的格式类型\r\n\r\n    # 根据剪切板数据类型进行处理\r\n    if NSPasteboardTypePNG in data_type:          # PNG处理\r\n        data = pb.dataForType_(NSPasteboardTypePNG)\r\n        filename = 'HELLO_PNG.png'\r\n        filepath = '/tmp/%s' % filename            # 保存文件的路径\r\n        ret = data.writeToFile_atomically_(filepath, False)    # 将剪切板数据保存为文件\r\n        if ret:   # 判断文件写入是否成功\r\n            return filepath\r\n    elif NSPasteboardTypeTIFF in data_type:         #TIFF处理： 一般剪切板里都是这种\r\n        # tiff\r\n        data = pb.dataForType_(NSPasteboardTypeTIFF)\r\n        filename = 'HELLO_TIFF.tiff'\r\n        filepath = '/tmp/%s' % filename\r\n        ret = data.writeToFile_atomically_(filepath, False)\r\n        if ret:\r\n            return filepath\r\n    elif NSPasteboardTypeString in data_type:\r\n        # string todo, recognise url of png & jpg\r\n        pass\r\n\r\nif __name__ == '__main__':\r\n    print get_paste_img_file()\r\n\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/367091461","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-367091461","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":367091461,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-20T19:29:38Z","updated_at":"2018-02-20T19:29:38Z","author_association":"OWNER","body":"# Python图片转化为Base64编码\r\n常用github api上传文件或图片，必须要将文件转化为base64编码才能上传。所以这里总结了下：\r\n```python\r\nimport base64\r\n\r\nwith open('PATH-TO-IMAGE', 'rb') as f:\r\n    pic = f.read()\r\n\r\nprint base64.b64encode(pic)\r\n```"},{"url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/comments/368226824","html_url":"https://github.com/solomonxie/solomonxie.github.io/issues/24#issuecomment-368226824","issue_url":"https://api.github.com/repos/solomonxie/solomonxie.github.io/issues/24","id":368226824,"user":{"login":"solomonxie","id":14041622,"avatar_url":"https://avatars2.githubusercontent.com/u/14041622?v=4","gravatar_id":"","url":"https://api.github.com/users/solomonxie","html_url":"https://github.com/solomonxie","followers_url":"https://api.github.com/users/solomonxie/followers","following_url":"https://api.github.com/users/solomonxie/following{/other_user}","gists_url":"https://api.github.com/users/solomonxie/gists{/gist_id}","starred_url":"https://api.github.com/users/solomonxie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomonxie/subscriptions","organizations_url":"https://api.github.com/users/solomonxie/orgs","repos_url":"https://api.github.com/users/solomonxie/repos","events_url":"https://api.github.com/users/solomonxie/events{/privacy}","received_events_url":"https://api.github.com/users/solomonxie/received_events","type":"User","site_admin":false},"created_at":"2018-02-24T12:57:37Z","updated_at":"2018-02-24T17:08:04Z","author_association":"OWNER","body":"# `pip freeze`命令显示当前环境所有安装的package\r\n对于我们经常使用virtualenv虚拟环境来说，经常需要指明需要哪些python package倚赖包。另外由于virtualenv如果和git仓库共存的状况下，我们必须要屏蔽文件夹里所有virtualenv的内容，所以这种情况更需要有一个显示的方法指明项目需要哪些倚赖包。\r\n很简单的一句话就搞定：\r\n```\r\npip freeze > requirements.txt\r\n```\r\n这样的话，pip就会自动显示出当前环境下已安装的所有package包，并且利用`>`重定向，输出到一个txt文档里。\r\n以后的话，还可以用这个txt文件达到一键安装所有倚赖：\r\n```\r\npip install -r requirements.txt\r\n```"}]